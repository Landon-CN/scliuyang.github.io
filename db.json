{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"31c10d6da12c06ec3c943209b295b0b35ef4a209","modified":1547728945000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1547729249000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1547729249000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1547729249000},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1547729249000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1547729249000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1547729249000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1547729249000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1547729249000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1547729249000},{"_id":"themes/next/bower.json","hash":"09628558259cf990fac43ed1f5ef9edae73f124b","modified":1547729249000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1547729249000},{"_id":"themes/next/README.md","hash":"b4f780a96b0e5d3737eb93bc00da6de91f042c4b","modified":1547729249000},{"_id":"themes/next/_config.yml","hash":"20deb11f666cb597e6ffc2ad0888f9a24e0bfe63","modified":1547729654000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1547729249000},{"_id":"themes/next/package.json","hash":"c791b45d1e6fde11a1e1e11ba5a6ced1f5ba0fce","modified":1547729249000},{"_id":"source/404/index-1.md","hash":"6934ab237f53a0281dbfd9518955d8753d2e6e96","modified":1547728945000},{"_id":"source/404/index.md","hash":"1ce8b31a1be653c987845a3cc7b31937ec7ae5f8","modified":1547728945000},{"_id":"source/_posts/ChromeDevTools3.md","hash":"eab70ee4d472aadcb8290f8468136c0568488365","modified":1547728945000},{"_id":"source/_posts/ChromeDevTools1.md","hash":"b0b5b92a88c3baba03bfd8a11d6500eeec2d920b","modified":1547728945000},{"_id":"source/_posts/ChromeDevTools2.md","hash":"871f8d44f6f94ba456f58539d3e004c415f20a49","modified":1547728945000},{"_id":"source/_posts/ChromeDevTools4.md","hash":"17c7307a3d9cd8a7ef9aca3bacef035c0e87e15e","modified":1547728945000},{"_id":"source/_posts/efficientQuestion.md","hash":"648279c9ca41f22d76440fed5b3f0088b55bb8b3","modified":1547728945000},{"_id":"source/_posts/docker.md","hash":"6c71459e590201cae78923506047dc16abd10a88","modified":1547728945000},{"_id":"source/_posts/yarn.md","hash":"c53c28e7c07f6bc3de4123784486407f33dbf8b0","modified":1547728945000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1547729249000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1cb29a0e54ef390f73cb85f254000d4b57460dae","modified":1547729249000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1547729249000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1547729249000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547729249000},{"_id":"themes/next/.github/stale.yml","hash":"a782ac925201a8fe07959bba0d7696c7b2b5fd2d","modified":1547729249000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1547729249000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1547729249000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1547729249000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1547729249000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1547729249000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1547729249000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1547729249000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1547729249000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1547729249000},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1547729249000},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1547729249000},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1547729249000},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1547729249000},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1547729249000},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1547729249000},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1547729249000},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1547729249000},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1547729249000},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1547729249000},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1547729249000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1547729249000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1547729249000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1547729249000},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1547729249000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1547729249000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1547729249000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1547729249000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1547729249000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1547729249000},{"_id":"themes/next/layout/_layout.swig","hash":"665a6874ec7f7f49f743165cc50da67380d67711","modified":1547729249000},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1547729249000},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1547729249000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1547729249000},{"_id":"themes/next/layout/page.swig","hash":"2d0e80e8a4dcba665704882b9dc5858c187acc31","modified":1547729249000},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1547729249000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1547729249000},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1547729249000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1547729249000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1547729249000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1547729249000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1547729249000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1547729249000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1547729249000},{"_id":"themes/next/docs/ru/README.md","hash":"953deb732e0b3b22c423122a189d6847d908c4b8","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1547729249000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"15e55eb77616500fa4c64982d6bad9ac17a46e2a","modified":1547729249000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1547729249000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"15582e823d228c0b2288543c1eb460c40afad29b","modified":1547729249000},{"_id":"themes/next/scripts/tags/button.js","hash":"08d5dfe05335f57d3e8392a74315766dafa52538","modified":1547729249000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1547729249000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"22de989163c4678278c8a112160be6977f570234","modified":1547729249000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"7ded3e7a78380b32de3e12f156e0978ef5c2890a","modified":1547729249000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"4775fffa526f1f7b40aa1f1c0a171dbcf5963df7","modified":1547729249000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1547729249000},{"_id":"themes/next/scripts/tags/label.js","hash":"76735c88cfba2e53649387a7fa5176706c2d3c0c","modified":1547729249000},{"_id":"themes/next/scripts/tags/note.js","hash":"84ce2d2c0646baafc82083e261b093b1c515f63c","modified":1547729249000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"8b1e9043db8f19ea4a12c473b3f729bd3b5bcb0e","modified":1547729249000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1547729249000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547729249000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1547729249000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1547729249000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"07340f3a4c8d8a9dd491d1eba18d985ecc0855a2","modified":1547729249000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1547729249000},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"a6ed0b4d6140bdfc5ea4995bb13d969cce50e74a","modified":1547729249000},{"_id":"themes/next/layout/_macro/post.swig","hash":"fd99aeb8b84625772d85d9ed8e5bd1221c3e201b","modified":1547729249000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a1ded7ba92354ed55ae20a0b6bcc15bbb4b801c2","modified":1547729249000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1547729249000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1547729249000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"d01881f8056203c4b6920328db8c2ae8fa662a08","modified":1547729249000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"d66bc7ec3cc03f60fcc7d555368a5b9b010f7f11","modified":1547729249000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1547729249000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c4c58ea2bd4cf10372a5e46dbec1b9a2e0e69f0f","modified":1547729249000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1547729249000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"4148001b0b3f8a29b13ba5cd3f6f636c9cb260b0","modified":1547729249000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"d359e638a86bd9664101c48e9344f21ec96e6a15","modified":1547729249000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1547729249000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1547729249000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"5453d76e00bfcd1d732fc5f41828a90eb681f645","modified":1547729249000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1547729249000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1b250c1b7945cb1029b9e855edb09854f7c8250a","modified":1547729249000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"272c46f03766ea0c169163342bb98f09f561cf4c","modified":1547729249000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1547729249000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547729249000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1547729249000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1547729249000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1547729249000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1547729249000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1547729249000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1547729249000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547729249000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1547729249000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1547729249000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547729249000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547729249000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1547729249000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1547729249000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547729249000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1547729249000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1547729249000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547729249000},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"1c30b09d1855f1720f71f5956e0c9ca4d57b1231","modified":1547729249000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1547729249000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1547729249000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1547729249000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"dc53a41196b675268bfd2a944f6258c57ed44e91","modified":1547729249000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"58e2e153e8b67e643b24453a1e1cceaae3323647","modified":1547729249000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1547729249000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"fe0614f1c15cf4c6f4bb72afe4a65e10824c9cb0","modified":1547729249000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1547729249000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6a825ce9412339ec4a128d9714804994cb85522c","modified":1547729249000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"69722be16ce5eae5c027168f9b2fded4776e1b53","modified":1547729249000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1547729249000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"2f73cc9ffb63534f0b6d8f0e9ee853c1af1b1244","modified":1547729249000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1547729249000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"64d65d9ad0cc94734ac6ded279e2b5dc870a1cab","modified":1547729249000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"d63208ee20529450c35de8fe80ef41fffa831dc9","modified":1547729249000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1547729249000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1547729249000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1547729249000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1547729249000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1547729249000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1547729249000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d5bfb363a1154e6505f0cccbd811fa71db133e3d","modified":1547729249000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"c7f2855f19dfdf18aba8c58d55b7489e631ed035","modified":1547729249000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1547729249000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1547729249000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"be24f204a515d5211bf3ba98a030e3bf61d4cc16","modified":1547729249000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"94e106755c5fb6f40431b621beeba0bd33877e57","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"866012e74109383c98b31e6062bc735068ac6014","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"9e576f12a294b14bd262f59c309a50cbf7003827","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"cbf620cf2a78e3ac736cdd7e768513cfd6946e83","modified":1547729249000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"5ced33d88f0e7c7546b8da7ff096c59bb0207cdf","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"197207078ff0f4d46417b4413493e02cda0b85f4","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"dbe94dd94678ee8e4002b06bb1e9ead2e59e44bf","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"a4ab8095bf60def5823bf6b7b91a92a356a4c098","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1547729249000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"210f0c152bc4a9375ed364398ce309f09ebafd10","modified":1547729249000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1547729249000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1547729249000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"c76c7ac9b97e74908467701b10e25707ba5c979e","modified":1547729249000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1547729249000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1547729249000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"323ccd05bf8befb7d33de443cf3ac6a4195c3554","modified":1547729249000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1547729249000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1547729249000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"086f5979b3de091c3378512e6c5c2f8fcb4f6298","modified":1547729249000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1547729249000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1547729249000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1547729249000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d0e97b205d3320421c380f2eee445457430c8152","modified":1547729249000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1547729249000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1547729249000},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1547729249000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1547729249000},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1547729249000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1547729249000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1547729249000},{"_id":"themes/next/source/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1547729249000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1547729249000},{"_id":"themes/next/source/js/src/utils.js","hash":"f1394d64977439ec569d2777b1ac304905e043f1","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1547729249000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1547729249000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1547729249000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1547729249000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1547729249000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"cd86bed852fec6e6933898067122a03755bc17f0","modified":1547729249000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"837ff3718cb5a63eb01a451e35989fd1dfe4218c","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1547729249000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"8c68d36d1c74628be58cb61e66948868a8c7588d","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"4fd38490b01af4f977b53aefc433cd2f981cde14","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"e3ad313825d7ad03e24bb76d036deeb50587022b","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"03d57bbe201e7d6865d5b303ee63f3f61c27c9d8","modified":1547729249000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"fe03041c387347e0bcf8efd1b4cf205ece66c339","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fe2dc74726a515549956d233becda188da64f948","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a5e3c6da76f6d5bed70c38fdf5796faa759d473","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"2dd866817d0bc7d179e81855f8fbcbb5d3c883fc","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"936132428a0d35b3947ccedd4c379940abcf223a","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"a5bef4fdde80951f3b8c154d79cb1e581638a988","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"09b5054ae34ba83c0d614821e574da265af55a14","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9b076c92abdadcf9acee75da64592ff3badd69b8","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"74c7dccf0a3ee9fc2ca25ad8e998243191813a0e","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"fd54eb599d5003bbb1aabc08596bc24a3fa3294f","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1547729249000},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1547729249000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1547729249000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1547729249000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547729249000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"9e0f215868df17cb27a4a522fd31156c66428c2d","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"05e68adae13f4d99a6ac6493daab39c92e39a6bd","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c59dbc1a6f2b4f15d8ae499f7aa227d9b0e3058","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"61af2f656f6e916f9920277bd048c5d58ff32a60","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3b5a37ba5e70f92c1ee707c8053524e38adbb710","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"300491cf0e80c34faf5f83a2846c177759ac653f","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ede576abad438366c8e81f47435242ade5a5a08c","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"0e8294d042d7d28c680ead48baa9e3c777d407c5","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"1cf64afd4b49143972f7617869539be3adb91a5e","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b5e5aa7074a965e396229c5bd263fb406770ce5f","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"3039df53b94b0847b0c451d2d227270b479cc184","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"b34bb2ea4d16e47e6fdc06cd4feb32d93ccbd779","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"cee0e70d1a6ea963bfd707bf9cedb8a4637f64c2","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"b964782056658ac785ec6070e747c97a5e234ddb","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"671a7f8aa138259172e7c6268d82d7a62a1e036a","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"9ab4e05e7b78af755ebdcbb71731fd723ed2d7f5","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"e73db17c210ada503aafca2daaf84a9bfd34be75","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"c11ef42781111d061ed5b6c14dd4359e2cba88be","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"0e760758221d4919902bda7c4d3bb96c94a678db","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"75f7876136fe1cae9b42d2c220e7f8b37b8d2f55","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"070251836b57027c8240c51e41cb8e8c999c4525","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"7d2222f66a1c1a0a3cc90bfd5d817d9b859f4a68","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"c415729e0f0d2439e63b93cec7ae32df54db87b4","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2d4f318644bf37c50e5b1fab8d62b2673fbab9e8","modified":1547729249000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"190ad18f45b8a69cef13b2fdd2254893d06ec2c3","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547729249000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1547729249000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547729249000},{"_id":"public/404/index-1.html","hash":"4a9068ce6eb993e958ceafe3d295c97c55d54d25","modified":1548052503569},{"_id":"public/404/index.html","hash":"a8934819b954b19212800da3193a02bd1a5925d8","modified":1548052503569},{"_id":"public/categories/scliuyang/index.html","hash":"6751b2861df66b8a875550c53774210b707dc1f2","modified":1548052503569},{"_id":"public/archives/2016/index.html","hash":"88506c9dfd687055afb7d78d6f354dbcaae91d88","modified":1548052503569},{"_id":"public/archives/index.html","hash":"c35a33699b81815dff026536c4d9fd2dfda7725d","modified":1548052503569},{"_id":"public/archives/2016/05/index.html","hash":"1a9f85b2285b5a6cbb8fa5af93e98cd461e3a80f","modified":1548052503570},{"_id":"public/archives/2016/11/index.html","hash":"ec500f4b872efb3a53208d177cb9cc2ac22acda7","modified":1548052503570},{"_id":"public/archives/2016/12/index.html","hash":"0807c064e7aa4db2e569999264d086ad6d66371b","modified":1548052503570},{"_id":"public/tags/Chrome-Developers-Tools/index.html","hash":"1ff8664982b8dabfc289e578a6eb779b5dba2bd9","modified":1548052503570},{"_id":"public/tags/Debug/index.html","hash":"1308e58b638ef35b302c674fe6b157968dd61f72","modified":1548052503570},{"_id":"public/tags/DevTools/index.html","hash":"75808afb10deb9acd23b05d4c48146b472af8e9c","modified":1548052503570},{"_id":"public/tags/提问/index.html","hash":"b049bf8a172822e591a0a4e57a3777890cf57327","modified":1548052503570},{"_id":"public/tags/高效的提问/index.html","hash":"710ab4b71a75034e7d2179068fe685d3b2a5f058","modified":1548052503570},{"_id":"public/tags/yarn/index.html","hash":"ab736600471384dca9f364db34eccd11417af721","modified":1548052503570},{"_id":"public/tags/docker/index.html","hash":"e1639cadad093592d2988128da788c67f32eef67","modified":1548052503570},{"_id":"public/2016/12/21/docker/index.html","hash":"d4079259522ef6f30959a05a7155899ffdfb4935","modified":1548052503570},{"_id":"public/2016/11/30/yarn/index.html","hash":"88d56d452c0ec33537e19567ffe40f6ede42fcfd","modified":1548052503570},{"_id":"public/2016/11/02/efficientQuestion/index.html","hash":"a309ad712ed38c282137ac55c071bb69d0617ed3","modified":1548052503570},{"_id":"public/2016/05/16/ChromeDevTools1/index.html","hash":"6dd7a0d02cd438997fa45e9f7ea027220d7e8c78","modified":1548052503570},{"_id":"public/2016/05/16/ChromeDevTools2/index.html","hash":"800255e6a65999976c4316ceae84aa8767305250","modified":1548052503570},{"_id":"public/2016/05/16/ChromeDevTools3/index.html","hash":"bd13377596f86c23e9fda354e82dfe762f4157e9","modified":1548052503570},{"_id":"public/2016/05/16/ChromeDevTools4/index.html","hash":"61ecb4d98af83e70849480ffa69db1a0a09dcae7","modified":1548052503570},{"_id":"public/index.html","hash":"f6da8f6cd63aa44ba656d80d2eceb1a8b2e94b42","modified":1548052503571},{"_id":"public/CNAME","hash":"31c10d6da12c06ec3c943209b295b0b35ef4a209","modified":1548052367768},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548052367768},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548052367768},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1548052367768},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1548052367768},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1548052367768},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1548052367768},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1548052367768},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548052367768},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1548052367768},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1548052367768},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548052367769},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548052367769},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1548052367769},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1548052367769},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548052367769},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1548052367769},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1548052367769},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548052367769},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1548052367769},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1548052367769},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548052368311},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548052368313},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1548052368316},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1548052368316},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1548052368316},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548052368316},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1548052368317},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1548052368317},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1548052368317},{"_id":"public/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1548052368317},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1548052368317},{"_id":"public/js/src/utils.js","hash":"f1394d64977439ec569d2777b1ac304905e043f1","modified":1548052368317},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1548052368317},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1548052368317},{"_id":"public/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1548052368317},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548052368317},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548052368317},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548052368318},{"_id":"public/css/main.css","hash":"4450d46cd33fad61dc1e1a1b7191a37bec460b64","modified":1548052368318},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548052368318},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548052368318},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548052368318},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548052368318},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548052368318},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548052368318},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548052368318},{"_id":"source/_posts/v8memory.md","hash":"267eee360020bb6bfe14dab736da5d433659a0c6","modified":1550644520000}],"Category":[{"name":"scliuyang","_id":"cjr5yeq160004jc5bb2ngzi7n"}],"Data":[],"Page":[{"title":"404","date":"2017-01-07T12:15:07.000Z","_content":"","source":"404/index-1.md","raw":"---\ntitle: 404\ndate: 2017-01-07 20:15:07\n---\n","updated":"2019-01-17T12:42:25.000Z","path":"404/index-1.html","comments":1,"layout":"page","_id":"cjr5yepvp0000jc5b9fljpmmc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"404","date":"2017-01-07T12:05:51.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2017-01-07 20:05:51\n---\n","updated":"2019-01-17T12:42:25.000Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjr5yepvq0001jc5bu9ha1aau","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"分析timeline提升页面性能","date":"2016-05-16T08:32:00.000Z","_content":"学习怎样通过DevTools诊断由于强制布局引起的性能问题\n\n<!--more-->\n\n# 获取数据\n首先，你需要捕获数据来确定到底在你的页面运行期间发生了什么。\n1. 打开[demo](https://googlesamples.github.io/web-fundamentals/samples/tools/chrome-devtools/profile/rendering-tools/forcedsync.html)\n2. 打开Timeline面板\n3. 打开js profile选项，这样我们将会看到函数的调用情况\n4. 点击start按钮来开始动画\n5. 点击Record按钮(小圆点)来记录信息\n6. 等待2S\n7. 点击Record按钮来停止记录\n\n当你停止记录时，你讲会看到如下的图形\n<img src='/uploads/scliuyang/ChromeDevTools/31.png' style=\"width:500px;\">\n\n# 确定问题\n现在你已经获得了性能数据，是时候去分析他了。\n\n瞄一眼，可以看到Summary面板上显示浏览器花费大量时间在Rendering上面。\n<img src='/uploads/scliuyang/ChromeDevTools/32.png' style=\"width:500px;\">\n现在将你的注意力转移到Overview面板中粉色的柱子上，这些表示每一帧的情况，鼠标放上去会显示关于这一帧的详细信息\n<img src='/uploads/scliuyang/ChromeDevTools/33.png' style=\"width:500px;\">\n可以看到每一帧花费了太多的时间来完成，如果我们想得到平滑的动画最好保持在60 fps。\n现在我们来分析为什么会造成这种情况，使用你的鼠标在call stack面板选中一段\n<img src='/uploads/scliuyang/ChromeDevTools/34.png' style=\"width:500px;\">\n堆栈最顶层是Animation Frame Fired事件。该事件是requestAnimationFrame()调用时产生的。在下面一层你看到function call，再下面你可以看到update。你可以推断update()是requestAnimationFrame()的回调函数\n\n现在集中你的注意力，找到在update event下的紫色条，这些紫色条大部分都会有一个红色的标记，这警告的标志。鼠标放上去你会看到DevTools警告你的页面有forced reflow,强制浏览器重新布局\n<img src='/uploads/scliuyang/ChromeDevTools/35.png' style=\"width:500px;\">\n现在我们来看看引起forced reflow的函数，点击一个紫色柱子，在Summary面板你会看到这个事件的详细信息，点击Layout Forced (update @ forcedsync.html:457)跳转到函数定义的地方\n<img src='/uploads/scliuyang/ChromeDevTools/36.png' style=\"width:500px;\">\n你将会在sources面板看到函数定义的地方\n<img src='/uploads/scliuyang/ChromeDevTools/37.png' style=\"width:500px;\">\n\n这个函数基于每个图像的offsetTop值来计算left值。这将强制浏览器重排来保证获取正确的属性值。每次循环都强制重排，会导致动画卡顿。\n\n# 修复问题\n\n因为获取offsetTop值时，会强制浏览器进行重排来保证值的正确性，所以去掉获取这句,如下所示\n\n```\nfunction update(timestamp) {\n            for (var m = 0; m < movers.length; m++) {\n                movers[m].style.left = ((Math.sin(m +\n                    timestamp / 1000) + 1) * 500) +\n                 'px';\n                // movers[m].style.left = ((Math.sin(m + timestamp/1000)+1) * 500) + 'px';\n                }\n            raf = window.requestAnimationFrame(update);\n        }\n```\n\n# 重新测试\n\n修改完毕后，重新获取一次timeline来查看结果\n<img src='/uploads/scliuyang/ChromeDevTools/39.png' style=\"width:500px;\">\n可以看到每一帧都非常的平滑，满足60fps的要求","source":"_posts/ChromeDevTools3.md","raw":"title: 分析timeline提升页面性能\ndate: 2016-5-16 16:32:00\ncategories: scliuyang\ntags:\n- Chrome Developers Tools\n- Debug\n- DevTools\n---\n学习怎样通过DevTools诊断由于强制布局引起的性能问题\n\n<!--more-->\n\n# 获取数据\n首先，你需要捕获数据来确定到底在你的页面运行期间发生了什么。\n1. 打开[demo](https://googlesamples.github.io/web-fundamentals/samples/tools/chrome-devtools/profile/rendering-tools/forcedsync.html)\n2. 打开Timeline面板\n3. 打开js profile选项，这样我们将会看到函数的调用情况\n4. 点击start按钮来开始动画\n5. 点击Record按钮(小圆点)来记录信息\n6. 等待2S\n7. 点击Record按钮来停止记录\n\n当你停止记录时，你讲会看到如下的图形\n<img src='/uploads/scliuyang/ChromeDevTools/31.png' style=\"width:500px;\">\n\n# 确定问题\n现在你已经获得了性能数据，是时候去分析他了。\n\n瞄一眼，可以看到Summary面板上显示浏览器花费大量时间在Rendering上面。\n<img src='/uploads/scliuyang/ChromeDevTools/32.png' style=\"width:500px;\">\n现在将你的注意力转移到Overview面板中粉色的柱子上，这些表示每一帧的情况，鼠标放上去会显示关于这一帧的详细信息\n<img src='/uploads/scliuyang/ChromeDevTools/33.png' style=\"width:500px;\">\n可以看到每一帧花费了太多的时间来完成，如果我们想得到平滑的动画最好保持在60 fps。\n现在我们来分析为什么会造成这种情况，使用你的鼠标在call stack面板选中一段\n<img src='/uploads/scliuyang/ChromeDevTools/34.png' style=\"width:500px;\">\n堆栈最顶层是Animation Frame Fired事件。该事件是requestAnimationFrame()调用时产生的。在下面一层你看到function call，再下面你可以看到update。你可以推断update()是requestAnimationFrame()的回调函数\n\n现在集中你的注意力，找到在update event下的紫色条，这些紫色条大部分都会有一个红色的标记，这警告的标志。鼠标放上去你会看到DevTools警告你的页面有forced reflow,强制浏览器重新布局\n<img src='/uploads/scliuyang/ChromeDevTools/35.png' style=\"width:500px;\">\n现在我们来看看引起forced reflow的函数，点击一个紫色柱子，在Summary面板你会看到这个事件的详细信息，点击Layout Forced (update @ forcedsync.html:457)跳转到函数定义的地方\n<img src='/uploads/scliuyang/ChromeDevTools/36.png' style=\"width:500px;\">\n你将会在sources面板看到函数定义的地方\n<img src='/uploads/scliuyang/ChromeDevTools/37.png' style=\"width:500px;\">\n\n这个函数基于每个图像的offsetTop值来计算left值。这将强制浏览器重排来保证获取正确的属性值。每次循环都强制重排，会导致动画卡顿。\n\n# 修复问题\n\n因为获取offsetTop值时，会强制浏览器进行重排来保证值的正确性，所以去掉获取这句,如下所示\n\n```\nfunction update(timestamp) {\n            for (var m = 0; m < movers.length; m++) {\n                movers[m].style.left = ((Math.sin(m +\n                    timestamp / 1000) + 1) * 500) +\n                 'px';\n                // movers[m].style.left = ((Math.sin(m + timestamp/1000)+1) * 500) + 'px';\n                }\n            raf = window.requestAnimationFrame(update);\n        }\n```\n\n# 重新测试\n\n修改完毕后，重新获取一次timeline来查看结果\n<img src='/uploads/scliuyang/ChromeDevTools/39.png' style=\"width:500px;\">\n可以看到每一帧都非常的平滑，满足60fps的要求","slug":"ChromeDevTools3","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq0z0002jc5bcnoiz6wm","content":"<p>学习怎样通过DevTools诊断由于强制布局引起的性能问题</p>\n<a id=\"more\"></a>\n<h1 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h1><p>首先，你需要捕获数据来确定到底在你的页面运行期间发生了什么。</p>\n<ol>\n<li>打开<a href=\"https://googlesamples.github.io/web-fundamentals/samples/tools/chrome-devtools/profile/rendering-tools/forcedsync.html\" target=\"_blank\" rel=\"noopener\">demo</a></li>\n<li>打开Timeline面板</li>\n<li>打开js profile选项，这样我们将会看到函数的调用情况</li>\n<li>点击start按钮来开始动画</li>\n<li>点击Record按钮(小圆点)来记录信息</li>\n<li>等待2S</li>\n<li>点击Record按钮来停止记录</li>\n</ol>\n<p>当你停止记录时，你讲会看到如下的图形<br><img src=\"/uploads/scliuyang/ChromeDevTools/31.png\" style=\"width:500px;\"></p>\n<h1 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h1><p>现在你已经获得了性能数据，是时候去分析他了。</p>\n<p>瞄一眼，可以看到Summary面板上显示浏览器花费大量时间在Rendering上面。<br><img src=\"/uploads/scliuyang/ChromeDevTools/32.png\" style=\"width:500px;\"><br>现在将你的注意力转移到Overview面板中粉色的柱子上，这些表示每一帧的情况，鼠标放上去会显示关于这一帧的详细信息<br><img src=\"/uploads/scliuyang/ChromeDevTools/33.png\" style=\"width:500px;\"><br>可以看到每一帧花费了太多的时间来完成，如果我们想得到平滑的动画最好保持在60 fps。<br>现在我们来分析为什么会造成这种情况，使用你的鼠标在call stack面板选中一段<br><img src=\"/uploads/scliuyang/ChromeDevTools/34.png\" style=\"width:500px;\"><br>堆栈最顶层是Animation Frame Fired事件。该事件是requestAnimationFrame()调用时产生的。在下面一层你看到function call，再下面你可以看到update。你可以推断update()是requestAnimationFrame()的回调函数</p>\n<p>现在集中你的注意力，找到在update event下的紫色条，这些紫色条大部分都会有一个红色的标记，这警告的标志。鼠标放上去你会看到DevTools警告你的页面有forced reflow,强制浏览器重新布局<br><img src=\"/uploads/scliuyang/ChromeDevTools/35.png\" style=\"width:500px;\"><br>现在我们来看看引起forced reflow的函数，点击一个紫色柱子，在Summary面板你会看到这个事件的详细信息，点击Layout Forced (update @ forcedsync.html:457)跳转到函数定义的地方<br><img src=\"/uploads/scliuyang/ChromeDevTools/36.png\" style=\"width:500px;\"><br>你将会在sources面板看到函数定义的地方<br><img src=\"/uploads/scliuyang/ChromeDevTools/37.png\" style=\"width:500px;\"></p>\n<p>这个函数基于每个图像的offsetTop值来计算left值。这将强制浏览器重排来保证获取正确的属性值。每次循环都强制重排，会导致动画卡顿。</p>\n<h1 id=\"修复问题\"><a href=\"#修复问题\" class=\"headerlink\" title=\"修复问题\"></a>修复问题</h1><p>因为获取offsetTop值时，会强制浏览器进行重排来保证值的正确性，所以去掉获取这句,如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update(timestamp) &#123;</span><br><span class=\"line\">            for (var m = 0; m &lt; movers.length; m++) &#123;</span><br><span class=\"line\">                movers[m].style.left = ((Math.sin(m +</span><br><span class=\"line\">                    timestamp / 1000) + 1) * 500) +</span><br><span class=\"line\">                 &apos;px&apos;;</span><br><span class=\"line\">                // movers[m].style.left = ((Math.sin(m + timestamp/1000)+1) * 500) + &apos;px&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            raf = window.requestAnimationFrame(update);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"重新测试\"><a href=\"#重新测试\" class=\"headerlink\" title=\"重新测试\"></a>重新测试</h1><p>修改完毕后，重新获取一次timeline来查看结果<br><img src=\"/uploads/scliuyang/ChromeDevTools/39.png\" style=\"width:500px;\"><br>可以看到每一帧都非常的平滑，满足60fps的要求</p>\n","site":{"data":{}},"excerpt":"<p>学习怎样通过DevTools诊断由于强制布局引起的性能问题</p>","more":"<h1 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h1><p>首先，你需要捕获数据来确定到底在你的页面运行期间发生了什么。</p>\n<ol>\n<li>打开<a href=\"https://googlesamples.github.io/web-fundamentals/samples/tools/chrome-devtools/profile/rendering-tools/forcedsync.html\" target=\"_blank\" rel=\"noopener\">demo</a></li>\n<li>打开Timeline面板</li>\n<li>打开js profile选项，这样我们将会看到函数的调用情况</li>\n<li>点击start按钮来开始动画</li>\n<li>点击Record按钮(小圆点)来记录信息</li>\n<li>等待2S</li>\n<li>点击Record按钮来停止记录</li>\n</ol>\n<p>当你停止记录时，你讲会看到如下的图形<br><img src=\"/uploads/scliuyang/ChromeDevTools/31.png\" style=\"width:500px;\"></p>\n<h1 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h1><p>现在你已经获得了性能数据，是时候去分析他了。</p>\n<p>瞄一眼，可以看到Summary面板上显示浏览器花费大量时间在Rendering上面。<br><img src=\"/uploads/scliuyang/ChromeDevTools/32.png\" style=\"width:500px;\"><br>现在将你的注意力转移到Overview面板中粉色的柱子上，这些表示每一帧的情况，鼠标放上去会显示关于这一帧的详细信息<br><img src=\"/uploads/scliuyang/ChromeDevTools/33.png\" style=\"width:500px;\"><br>可以看到每一帧花费了太多的时间来完成，如果我们想得到平滑的动画最好保持在60 fps。<br>现在我们来分析为什么会造成这种情况，使用你的鼠标在call stack面板选中一段<br><img src=\"/uploads/scliuyang/ChromeDevTools/34.png\" style=\"width:500px;\"><br>堆栈最顶层是Animation Frame Fired事件。该事件是requestAnimationFrame()调用时产生的。在下面一层你看到function call，再下面你可以看到update。你可以推断update()是requestAnimationFrame()的回调函数</p>\n<p>现在集中你的注意力，找到在update event下的紫色条，这些紫色条大部分都会有一个红色的标记，这警告的标志。鼠标放上去你会看到DevTools警告你的页面有forced reflow,强制浏览器重新布局<br><img src=\"/uploads/scliuyang/ChromeDevTools/35.png\" style=\"width:500px;\"><br>现在我们来看看引起forced reflow的函数，点击一个紫色柱子，在Summary面板你会看到这个事件的详细信息，点击Layout Forced (update @ forcedsync.html:457)跳转到函数定义的地方<br><img src=\"/uploads/scliuyang/ChromeDevTools/36.png\" style=\"width:500px;\"><br>你将会在sources面板看到函数定义的地方<br><img src=\"/uploads/scliuyang/ChromeDevTools/37.png\" style=\"width:500px;\"></p>\n<p>这个函数基于每个图像的offsetTop值来计算left值。这将强制浏览器重排来保证获取正确的属性值。每次循环都强制重排，会导致动画卡顿。</p>\n<h1 id=\"修复问题\"><a href=\"#修复问题\" class=\"headerlink\" title=\"修复问题\"></a>修复问题</h1><p>因为获取offsetTop值时，会强制浏览器进行重排来保证值的正确性，所以去掉获取这句,如下所示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function update(timestamp) &#123;</span><br><span class=\"line\">            for (var m = 0; m &lt; movers.length; m++) &#123;</span><br><span class=\"line\">                movers[m].style.left = ((Math.sin(m +</span><br><span class=\"line\">                    timestamp / 1000) + 1) * 500) +</span><br><span class=\"line\">                 &apos;px&apos;;</span><br><span class=\"line\">                // movers[m].style.left = ((Math.sin(m + timestamp/1000)+1) * 500) + &apos;px&apos;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            raf = window.requestAnimationFrame(update);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"重新测试\"><a href=\"#重新测试\" class=\"headerlink\" title=\"重新测试\"></a>重新测试</h1><p>修改完毕后，重新获取一次timeline来查看结果<br><img src=\"/uploads/scliuyang/ChromeDevTools/39.png\" style=\"width:500px;\"><br>可以看到每一帧都非常的平滑，满足60fps的要求</p>"},{"title":"Chrome Developers Tools基础篇","date":"2016-05-16T08:32:00.000Z","_content":"Chrome开发工具(简称DevTools),是一组内置Google Chrome网页编辑和调试工具。DevTools提供web开发人员进入浏览器和web应用程序代码内部深处。使用DevTools有效追踪布局问题,设置JavaScript断点,获得代码优化的建议。\n\n<!--more-->\n\n# Chrome开发工具基础篇\n\n## 第一部分 Elements\n\n在Elements面板中主要分为两大部分\n1. HTML DOM结构面板\n2. 查看和操作DOM样式，结构面板\n<img src='http://p1.bpimg.com/567571/29af4009b16fde56.png' style='width:500px;'>\n在DOM结构面板中，每当你的鼠标移动到任何一个元素上，对应HTML视图中会高亮显示对应的元素，方便开发者查看\n<img src='http://p1.bqimg.com/567571/e78bc279fc4a516e.jpg' style='width:500px;'>\n而且选中的元素会在dev工具下面列出该元素在DOM结构中的关系\n<img src='http://p1.bqimg.com/567571/6e0096aa4b09b3bc.jpg' style='width:500px;'>\n选中DOM元素后，在属性栏中会列出该元素所有的CSS属性，\n1. 可以输入属性名进行筛选，这样可以只看关注的属性名\n2. 可以模拟元素的伪状态，方便调试\n3. 属性定义的位置，点击可以跳转到源文件\n4. 双击可以修改属性值，方便调试\n\n<img src='http://p1.bqimg.com/567571/cbc415ed89665aa5.jpg' style='width:500px;'>\nEvent Listeners面板可以查看当前DOM节点上绑定的事件，上面每个功能点意义如下\n1. Ancestors 是否显示祖先上绑定的事件，不选中时click下面的body项会消失\n2. Framework listeners (建议勾上)勾上后浏览器会处理主流框架的绑定事件，这样第4部分显示位置更加准确。\n3. 该事件监听的元素\n4. 事件定义的位置，点击可以跳转到源码\n5. 是否是捕获阶段触发\n6. 事件响应函数，鼠标放上去可以显示源码\n\n## 第二部分 Console\nConsole控制台搜集程序运行信息，使用得当可以有如下功效\n- 更高「逼格」更快「开发调试」更强「进阶级的Frontender」\n- Bug无处遁形「Console大法好」\n\n### console.log\n大家都会用log，但鲜有人很好地利用console.error , console.warn 等将输出到控制台的信息进行分类整理。\n他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。\n各个所代表的语义如下：\n- console.log：普通信息\n- console.info：提示类信息\n- console.error：错误信息\n- console.warn：警示信息\n\n当合理使用上述log方法后，可以很方便地在控制台选择查看特定类型的信息。\n<img src='http://p1.bqimg.com/567571/3da10b3d896cb22d.jpg' style='width:500px;'>\n如果再配合console.group 与console.groupEnd，可以将这种分类管理的思想发挥到极致。这适合于在开发一个规模很大模块很多很复杂的Web APP时，将各自的log信息分组到以各自命名空间为名称的组里面。\n<img src='http://p1.bqimg.com/567571/d4a56519ad2fe3dc.jpg' style='width:500px;'>\n而关于console.log，早已被玩儿坏了。一切都源于Chrome提供了这么一个API：第一个参数可以包含一些格式化的指令比如%c。\n\n比如给hello world 做件漂亮的嫁衣再拉出来见人：\n<img src='http://p1.bqimg.com/567571/d5c3c75c91c1b80d.jpg' style='width:500px;'>\n除此，console.table 更是直接以表格的形式将数据输出\n<img src='http://p1.bqimg.com/567571/ec0faa9014024c4e.jpg' style='width:500px;'>\n\n### console.dir\n将DOM结点以JavaScript对象的形式输出到控制台\n而console.log是直接将该DOM结点以DOM树的结构进行输出，与在元素审查时看到的结构是一致的。不同的展现形式，同样的优雅\n<img src='http://p1.bqimg.com/567571/9e3808263ac8bbfa.jpg' style='width:500px;'>\n\n### console.time & console.timeEnd\n当做一些性能测试时，同样可以在这里很方便地进行。\n比如需要考量一段代码执行的耗时情况时，可以用console.time与 console.timeEnd来做此事。\n\n这里借用官方文档的例子：\n\n```\nconsole.time(\"Array initialize\");\nvar array= new Array(1000000);\nfor (var i = array.length - 1; i >= 0; i--) {\n    array[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n```\n<img src='http://p1.bqimg.com/567571/683676d430312b75.jpg' style='width:500px;'>\n\n### console.profile & console.timeLime\n\n当想要查看CPU使用相关的信息时，可以使用console.profile配合 console.profileEnd来完成这个需求。\n这一功能可以通过UI界面来完成，Chrome 开发者工具里面有个tab便是Profile。\n\n与此类似的功能还有console.timeLine配合 console.timeLineEnd,它的作用是开始记录一段时间轴，同样可以通过Chrome开发者工具里的Timeline 标签来进行相应操作。\n\n所以在我看来这两个方法有点鸡肋，因为都可以通过操作界面来完成。但至少他提供了一种命令行方式的交互，还是多了种姿势供选择吧。\n\n### console.trace\n\n堆栈跟踪相关的调试可以使用console.trace。这个同样可以通过UI界面完成。当代码被打断点后，可以在Call Stack面板中查看相关堆栈信息。\n\n上面介绍的都是挂在window.console这个对象下面的方法，统称为[Console API](https://developer.chrome.com/devtools/docs/console-api)，接下来的这些方法确切地说应该叫命令，是Chrome内置提供，在控制台中使用的，他们统称为[Command Line API](https://developer.chrome.com/devtools/docs/commandline-api)。\n\n### $_\n代表着最近一次命令返回的结果，并且可以作为一个变量使用在接下来的表达式中：\n<img src='http://p1.bqimg.com/567571/13f2e4a9976dda37.jpg' style='width:500px;'>\n\n### $0-$4\n$0~$4则代表了最近5个你选择过的DOM节点\n在页面右击选择审查元素，然后在弹出来的DOM结点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次点选的DOM结点，以此类推，$1返回的是上上次点选的DOM节点，最多保存了5个，如果不够5个，则返回undefined。\n<img src='http://p1.bqimg.com/567571/b210e95b0a42bd79.gif' style='width:500px;'>\n\n### $\n$其实是document.querySelector()的别称，返回第一个选中的DOM节点\n### $$\n$$调用document.querySelectorAll()函数，返回一个数组形式的DOM节点\n### copy\n通过此命令可以将在控制台获取到的内容复制到剪贴板。\n### inspect\n传入一个DOM节点，自动转到Elements面板中对应node的位置，是不是很方便呐\n<img src='http://p1.bqimg.com/567571/cb75164513a39d13.png' style='width:500px;'>\n\n## Resources\nResources部分较简单，他主要向我们展示了本界面所加载的资源列表。还有cookie和local storage 、SESSION 等本地存储信息，在这里，我们可以自由地修改、增加、删除本地存储。\n<img src='http://p1.bqimg.com/567571/16443a8512ef42d0.jpg' style='width:500px;'>\n\n## Network\nNetwork是一个监控当前网页所有的http请求的面版，它主体部分展示的是每个http请求，每个字段表示着该请求的不同属性和状态\n<img src='http://p1.bqimg.com/567571/dbf08c4c84988be2.jpg' style='width:500px;'>\n- Name：请求文件名称\n- Method：方法（常见的是get post）\n- Status：请求完成的状态\n- Type：请求的类型\n- Initiator：请求源也就是说该链接通过什么发送（常见的是Parser、Script）\n- Size：下载文件或者请求占的资源大小\n- Time：请求或下载的时间\n- Timeline：该链接在发送过程中的时间状态轴（我们可以把鼠标移动到这些红红绿绿的时间轴上，对应的会有它的详细信息：开始下载时间，等待加载时间，自身下载耗时）\n\n\n<img src='http://p1.bqimg.com/567571/1f111ab517712d86.jpg' style='width:500px;'>\n- Stalled: 即请求处于阻塞状态, 如之前有很多请求没处理完，而浏览器对同域并发请求有限制，导致后面的请求处于阻塞状态\n- Proxy negotiation: 与代理服务器的连接通信阶段\n- DNS Lookup: DNS查找阶段（本请求未涉及，只有在首次访问一个新的域名的时候才会有该阶段）\n- Initial Connection / connecting: 建立连接的过程，包含TCP握手/重试，商定SSL\n- SSL: 完成SSL握手阶段\n- Request sent: 发送请求，通常只要不到1ms的时间\n- Waiting(TTFB): 发出请求后等待服务端响应的时间，响应时间极为第一个字节发送过来的时间\n- Content Download: 接收响应数据的时间\n","source":"_posts/ChromeDevTools1.md","raw":"title: Chrome Developers Tools基础篇\ndate: 2016-5-16 16:32:00\ncategories: scliuyang\ntags:\n- Chrome Developers Tools\n- Debug\n- DevTools\n---\nChrome开发工具(简称DevTools),是一组内置Google Chrome网页编辑和调试工具。DevTools提供web开发人员进入浏览器和web应用程序代码内部深处。使用DevTools有效追踪布局问题,设置JavaScript断点,获得代码优化的建议。\n\n<!--more-->\n\n# Chrome开发工具基础篇\n\n## 第一部分 Elements\n\n在Elements面板中主要分为两大部分\n1. HTML DOM结构面板\n2. 查看和操作DOM样式，结构面板\n<img src='http://p1.bpimg.com/567571/29af4009b16fde56.png' style='width:500px;'>\n在DOM结构面板中，每当你的鼠标移动到任何一个元素上，对应HTML视图中会高亮显示对应的元素，方便开发者查看\n<img src='http://p1.bqimg.com/567571/e78bc279fc4a516e.jpg' style='width:500px;'>\n而且选中的元素会在dev工具下面列出该元素在DOM结构中的关系\n<img src='http://p1.bqimg.com/567571/6e0096aa4b09b3bc.jpg' style='width:500px;'>\n选中DOM元素后，在属性栏中会列出该元素所有的CSS属性，\n1. 可以输入属性名进行筛选，这样可以只看关注的属性名\n2. 可以模拟元素的伪状态，方便调试\n3. 属性定义的位置，点击可以跳转到源文件\n4. 双击可以修改属性值，方便调试\n\n<img src='http://p1.bqimg.com/567571/cbc415ed89665aa5.jpg' style='width:500px;'>\nEvent Listeners面板可以查看当前DOM节点上绑定的事件，上面每个功能点意义如下\n1. Ancestors 是否显示祖先上绑定的事件，不选中时click下面的body项会消失\n2. Framework listeners (建议勾上)勾上后浏览器会处理主流框架的绑定事件，这样第4部分显示位置更加准确。\n3. 该事件监听的元素\n4. 事件定义的位置，点击可以跳转到源码\n5. 是否是捕获阶段触发\n6. 事件响应函数，鼠标放上去可以显示源码\n\n## 第二部分 Console\nConsole控制台搜集程序运行信息，使用得当可以有如下功效\n- 更高「逼格」更快「开发调试」更强「进阶级的Frontender」\n- Bug无处遁形「Console大法好」\n\n### console.log\n大家都会用log，但鲜有人很好地利用console.error , console.warn 等将输出到控制台的信息进行分类整理。\n他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。\n各个所代表的语义如下：\n- console.log：普通信息\n- console.info：提示类信息\n- console.error：错误信息\n- console.warn：警示信息\n\n当合理使用上述log方法后，可以很方便地在控制台选择查看特定类型的信息。\n<img src='http://p1.bqimg.com/567571/3da10b3d896cb22d.jpg' style='width:500px;'>\n如果再配合console.group 与console.groupEnd，可以将这种分类管理的思想发挥到极致。这适合于在开发一个规模很大模块很多很复杂的Web APP时，将各自的log信息分组到以各自命名空间为名称的组里面。\n<img src='http://p1.bqimg.com/567571/d4a56519ad2fe3dc.jpg' style='width:500px;'>\n而关于console.log，早已被玩儿坏了。一切都源于Chrome提供了这么一个API：第一个参数可以包含一些格式化的指令比如%c。\n\n比如给hello world 做件漂亮的嫁衣再拉出来见人：\n<img src='http://p1.bqimg.com/567571/d5c3c75c91c1b80d.jpg' style='width:500px;'>\n除此，console.table 更是直接以表格的形式将数据输出\n<img src='http://p1.bqimg.com/567571/ec0faa9014024c4e.jpg' style='width:500px;'>\n\n### console.dir\n将DOM结点以JavaScript对象的形式输出到控制台\n而console.log是直接将该DOM结点以DOM树的结构进行输出，与在元素审查时看到的结构是一致的。不同的展现形式，同样的优雅\n<img src='http://p1.bqimg.com/567571/9e3808263ac8bbfa.jpg' style='width:500px;'>\n\n### console.time & console.timeEnd\n当做一些性能测试时，同样可以在这里很方便地进行。\n比如需要考量一段代码执行的耗时情况时，可以用console.time与 console.timeEnd来做此事。\n\n这里借用官方文档的例子：\n\n```\nconsole.time(\"Array initialize\");\nvar array= new Array(1000000);\nfor (var i = array.length - 1; i >= 0; i--) {\n    array[i] = new Object();\n};\nconsole.timeEnd(\"Array initialize\");\n```\n<img src='http://p1.bqimg.com/567571/683676d430312b75.jpg' style='width:500px;'>\n\n### console.profile & console.timeLime\n\n当想要查看CPU使用相关的信息时，可以使用console.profile配合 console.profileEnd来完成这个需求。\n这一功能可以通过UI界面来完成，Chrome 开发者工具里面有个tab便是Profile。\n\n与此类似的功能还有console.timeLine配合 console.timeLineEnd,它的作用是开始记录一段时间轴，同样可以通过Chrome开发者工具里的Timeline 标签来进行相应操作。\n\n所以在我看来这两个方法有点鸡肋，因为都可以通过操作界面来完成。但至少他提供了一种命令行方式的交互，还是多了种姿势供选择吧。\n\n### console.trace\n\n堆栈跟踪相关的调试可以使用console.trace。这个同样可以通过UI界面完成。当代码被打断点后，可以在Call Stack面板中查看相关堆栈信息。\n\n上面介绍的都是挂在window.console这个对象下面的方法，统称为[Console API](https://developer.chrome.com/devtools/docs/console-api)，接下来的这些方法确切地说应该叫命令，是Chrome内置提供，在控制台中使用的，他们统称为[Command Line API](https://developer.chrome.com/devtools/docs/commandline-api)。\n\n### $_\n代表着最近一次命令返回的结果，并且可以作为一个变量使用在接下来的表达式中：\n<img src='http://p1.bqimg.com/567571/13f2e4a9976dda37.jpg' style='width:500px;'>\n\n### $0-$4\n$0~$4则代表了最近5个你选择过的DOM节点\n在页面右击选择审查元素，然后在弹出来的DOM结点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次点选的DOM结点，以此类推，$1返回的是上上次点选的DOM节点，最多保存了5个，如果不够5个，则返回undefined。\n<img src='http://p1.bqimg.com/567571/b210e95b0a42bd79.gif' style='width:500px;'>\n\n### $\n$其实是document.querySelector()的别称，返回第一个选中的DOM节点\n### $$\n$$调用document.querySelectorAll()函数，返回一个数组形式的DOM节点\n### copy\n通过此命令可以将在控制台获取到的内容复制到剪贴板。\n### inspect\n传入一个DOM节点，自动转到Elements面板中对应node的位置，是不是很方便呐\n<img src='http://p1.bqimg.com/567571/cb75164513a39d13.png' style='width:500px;'>\n\n## Resources\nResources部分较简单，他主要向我们展示了本界面所加载的资源列表。还有cookie和local storage 、SESSION 等本地存储信息，在这里，我们可以自由地修改、增加、删除本地存储。\n<img src='http://p1.bqimg.com/567571/16443a8512ef42d0.jpg' style='width:500px;'>\n\n## Network\nNetwork是一个监控当前网页所有的http请求的面版，它主体部分展示的是每个http请求，每个字段表示着该请求的不同属性和状态\n<img src='http://p1.bqimg.com/567571/dbf08c4c84988be2.jpg' style='width:500px;'>\n- Name：请求文件名称\n- Method：方法（常见的是get post）\n- Status：请求完成的状态\n- Type：请求的类型\n- Initiator：请求源也就是说该链接通过什么发送（常见的是Parser、Script）\n- Size：下载文件或者请求占的资源大小\n- Time：请求或下载的时间\n- Timeline：该链接在发送过程中的时间状态轴（我们可以把鼠标移动到这些红红绿绿的时间轴上，对应的会有它的详细信息：开始下载时间，等待加载时间，自身下载耗时）\n\n\n<img src='http://p1.bqimg.com/567571/1f111ab517712d86.jpg' style='width:500px;'>\n- Stalled: 即请求处于阻塞状态, 如之前有很多请求没处理完，而浏览器对同域并发请求有限制，导致后面的请求处于阻塞状态\n- Proxy negotiation: 与代理服务器的连接通信阶段\n- DNS Lookup: DNS查找阶段（本请求未涉及，只有在首次访问一个新的域名的时候才会有该阶段）\n- Initial Connection / connecting: 建立连接的过程，包含TCP握手/重试，商定SSL\n- SSL: 完成SSL握手阶段\n- Request sent: 发送请求，通常只要不到1ms的时间\n- Waiting(TTFB): 发出请求后等待服务端响应的时间，响应时间极为第一个字节发送过来的时间\n- Content Download: 接收响应数据的时间\n","slug":"ChromeDevTools1","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq130003jc5bxi2ogy6m","content":"<p>Chrome开发工具(简称DevTools),是一组内置Google Chrome网页编辑和调试工具。DevTools提供web开发人员进入浏览器和web应用程序代码内部深处。使用DevTools有效追踪布局问题,设置JavaScript断点,获得代码优化的建议。</p>\n<a id=\"more\"></a>\n<h1 id=\"Chrome开发工具基础篇\"><a href=\"#Chrome开发工具基础篇\" class=\"headerlink\" title=\"Chrome开发工具基础篇\"></a>Chrome开发工具基础篇</h1><h2 id=\"第一部分-Elements\"><a href=\"#第一部分-Elements\" class=\"headerlink\" title=\"第一部分 Elements\"></a>第一部分 Elements</h2><p>在Elements面板中主要分为两大部分</p>\n<ol>\n<li>HTML DOM结构面板</li>\n<li>查看和操作DOM样式，结构面板<br><img src=\"http://p1.bpimg.com/567571/29af4009b16fde56.png\" style=\"width:500px;\"><br>在DOM结构面板中，每当你的鼠标移动到任何一个元素上，对应HTML视图中会高亮显示对应的元素，方便开发者查看<br><img src=\"http://p1.bqimg.com/567571/e78bc279fc4a516e.jpg\" style=\"width:500px;\"><br>而且选中的元素会在dev工具下面列出该元素在DOM结构中的关系<br><img src=\"http://p1.bqimg.com/567571/6e0096aa4b09b3bc.jpg\" style=\"width:500px;\"><br>选中DOM元素后，在属性栏中会列出该元素所有的CSS属性，</li>\n<li>可以输入属性名进行筛选，这样可以只看关注的属性名</li>\n<li>可以模拟元素的伪状态，方便调试</li>\n<li>属性定义的位置，点击可以跳转到源文件</li>\n<li>双击可以修改属性值，方便调试</li>\n</ol>\n<p><img src=\"http://p1.bqimg.com/567571/cbc415ed89665aa5.jpg\" style=\"width:500px;\"><br>Event Listeners面板可以查看当前DOM节点上绑定的事件，上面每个功能点意义如下</p>\n<ol>\n<li>Ancestors 是否显示祖先上绑定的事件，不选中时click下面的body项会消失</li>\n<li>Framework listeners (建议勾上)勾上后浏览器会处理主流框架的绑定事件，这样第4部分显示位置更加准确。</li>\n<li>该事件监听的元素</li>\n<li>事件定义的位置，点击可以跳转到源码</li>\n<li>是否是捕获阶段触发</li>\n<li>事件响应函数，鼠标放上去可以显示源码</li>\n</ol>\n<h2 id=\"第二部分-Console\"><a href=\"#第二部分-Console\" class=\"headerlink\" title=\"第二部分 Console\"></a>第二部分 Console</h2><p>Console控制台搜集程序运行信息，使用得当可以有如下功效</p>\n<ul>\n<li>更高「逼格」更快「开发调试」更强「进阶级的Frontender」</li>\n<li>Bug无处遁形「Console大法好」</li>\n</ul>\n<h3 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h3><p>大家都会用log，但鲜有人很好地利用console.error , console.warn 等将输出到控制台的信息进行分类整理。<br>他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。<br>各个所代表的语义如下：</p>\n<ul>\n<li>console.log：普通信息</li>\n<li>console.info：提示类信息</li>\n<li>console.error：错误信息</li>\n<li>console.warn：警示信息</li>\n</ul>\n<p>当合理使用上述log方法后，可以很方便地在控制台选择查看特定类型的信息。<br><img src=\"http://p1.bqimg.com/567571/3da10b3d896cb22d.jpg\" style=\"width:500px;\"><br>如果再配合console.group 与console.groupEnd，可以将这种分类管理的思想发挥到极致。这适合于在开发一个规模很大模块很多很复杂的Web APP时，将各自的log信息分组到以各自命名空间为名称的组里面。<br><img src=\"http://p1.bqimg.com/567571/d4a56519ad2fe3dc.jpg\" style=\"width:500px;\"><br>而关于console.log，早已被玩儿坏了。一切都源于Chrome提供了这么一个API：第一个参数可以包含一些格式化的指令比如%c。</p>\n<p>比如给hello world 做件漂亮的嫁衣再拉出来见人：<br><img src=\"http://p1.bqimg.com/567571/d5c3c75c91c1b80d.jpg\" style=\"width:500px;\"><br>除此，console.table 更是直接以表格的形式将数据输出<br><img src=\"http://p1.bqimg.com/567571/ec0faa9014024c4e.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-dir\"><a href=\"#console-dir\" class=\"headerlink\" title=\"console.dir\"></a>console.dir</h3><p>将DOM结点以JavaScript对象的形式输出到控制台<br>而console.log是直接将该DOM结点以DOM树的结构进行输出，与在元素审查时看到的结构是一致的。不同的展现形式，同样的优雅<br><img src=\"http://p1.bqimg.com/567571/9e3808263ac8bbfa.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-time-amp-console-timeEnd\"><a href=\"#console-time-amp-console-timeEnd\" class=\"headerlink\" title=\"console.time &amp; console.timeEnd\"></a>console.time &amp; console.timeEnd</h3><p>当做一些性能测试时，同样可以在这里很方便地进行。<br>比如需要考量一段代码执行的耗时情况时，可以用console.time与 console.timeEnd来做此事。</p>\n<p>这里借用官方文档的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(&quot;Array initialize&quot;);</span><br><span class=\"line\">var array= new Array(1000000);</span><br><span class=\"line\">for (var i = array.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">    array[i] = new Object();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.timeEnd(&quot;Array initialize&quot;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1.bqimg.com/567571/683676d430312b75.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-profile-amp-console-timeLime\"><a href=\"#console-profile-amp-console-timeLime\" class=\"headerlink\" title=\"console.profile &amp; console.timeLime\"></a>console.profile &amp; console.timeLime</h3><p>当想要查看CPU使用相关的信息时，可以使用console.profile配合 console.profileEnd来完成这个需求。<br>这一功能可以通过UI界面来完成，Chrome 开发者工具里面有个tab便是Profile。</p>\n<p>与此类似的功能还有console.timeLine配合 console.timeLineEnd,它的作用是开始记录一段时间轴，同样可以通过Chrome开发者工具里的Timeline 标签来进行相应操作。</p>\n<p>所以在我看来这两个方法有点鸡肋，因为都可以通过操作界面来完成。但至少他提供了一种命令行方式的交互，还是多了种姿势供选择吧。</p>\n<h3 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace\"></a>console.trace</h3><p>堆栈跟踪相关的调试可以使用console.trace。这个同样可以通过UI界面完成。当代码被打断点后，可以在Call Stack面板中查看相关堆栈信息。</p>\n<p>上面介绍的都是挂在window.console这个对象下面的方法，统称为<a href=\"https://developer.chrome.com/devtools/docs/console-api\" target=\"_blank\" rel=\"noopener\">Console API</a>，接下来的这些方法确切地说应该叫命令，是Chrome内置提供，在控制台中使用的，他们统称为<a href=\"https://developer.chrome.com/devtools/docs/commandline-api\" target=\"_blank\" rel=\"noopener\">Command Line API</a>。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a>$_</h3><p>代表着最近一次命令返回的结果，并且可以作为一个变量使用在接下来的表达式中：<br><img src=\"http://p1.bqimg.com/567571/13f2e4a9976dda37.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"0-4\"><a href=\"#0-4\" class=\"headerlink\" title=\"$0-$4\"></a>$0-$4</h3><p>$0~$4则代表了最近5个你选择过的DOM节点<br>在页面右击选择审查元素，然后在弹出来的DOM结点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次点选的DOM结点，以此类推，$1返回的是上上次点选的DOM节点，最多保存了5个，如果不够5个，则返回undefined。<br><img src=\"http://p1.bqimg.com/567571/b210e95b0a42bd79.gif\" style=\"width:500px;\"></p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"$\"></a>$</h3><p>$其实是document.querySelector()的别称，返回第一个选中的DOM节点</p>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"$$\"></a>$$</h3><p>$$调用document.querySelectorAll()函数，返回一个数组形式的DOM节点</p>\n<h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>通过此命令可以将在控制台获取到的内容复制到剪贴板。</p>\n<h3 id=\"inspect\"><a href=\"#inspect\" class=\"headerlink\" title=\"inspect\"></a>inspect</h3><p>传入一个DOM节点，自动转到Elements面板中对应node的位置，是不是很方便呐<br><img src=\"http://p1.bqimg.com/567571/cb75164513a39d13.png\" style=\"width:500px;\"></p>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p>Resources部分较简单，他主要向我们展示了本界面所加载的资源列表。还有cookie和local storage 、SESSION 等本地存储信息，在这里，我们可以自由地修改、增加、删除本地存储。<br><img src=\"http://p1.bqimg.com/567571/16443a8512ef42d0.jpg\" style=\"width:500px;\"></p>\n<h2 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h2><p>Network是一个监控当前网页所有的http请求的面版，它主体部分展示的是每个http请求，每个字段表示着该请求的不同属性和状态<br><img src=\"http://p1.bqimg.com/567571/dbf08c4c84988be2.jpg\" style=\"width:500px;\"></p>\n<ul>\n<li>Name：请求文件名称</li>\n<li>Method：方法（常见的是get post）</li>\n<li>Status：请求完成的状态</li>\n<li>Type：请求的类型</li>\n<li>Initiator：请求源也就是说该链接通过什么发送（常见的是Parser、Script）</li>\n<li>Size：下载文件或者请求占的资源大小</li>\n<li>Time：请求或下载的时间</li>\n<li>Timeline：该链接在发送过程中的时间状态轴（我们可以把鼠标移动到这些红红绿绿的时间轴上，对应的会有它的详细信息：开始下载时间，等待加载时间，自身下载耗时）</li>\n</ul>\n<p><img src=\"http://p1.bqimg.com/567571/1f111ab517712d86.jpg\" style=\"width:500px;\"></p>\n<ul>\n<li>Stalled: 即请求处于阻塞状态, 如之前有很多请求没处理完，而浏览器对同域并发请求有限制，导致后面的请求处于阻塞状态</li>\n<li>Proxy negotiation: 与代理服务器的连接通信阶段</li>\n<li>DNS Lookup: DNS查找阶段（本请求未涉及，只有在首次访问一个新的域名的时候才会有该阶段）</li>\n<li>Initial Connection / connecting: 建立连接的过程，包含TCP握手/重试，商定SSL</li>\n<li>SSL: 完成SSL握手阶段</li>\n<li>Request sent: 发送请求，通常只要不到1ms的时间</li>\n<li>Waiting(TTFB): 发出请求后等待服务端响应的时间，响应时间极为第一个字节发送过来的时间</li>\n<li>Content Download: 接收响应数据的时间</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Chrome开发工具(简称DevTools),是一组内置Google Chrome网页编辑和调试工具。DevTools提供web开发人员进入浏览器和web应用程序代码内部深处。使用DevTools有效追踪布局问题,设置JavaScript断点,获得代码优化的建议。</p>","more":"<h1 id=\"Chrome开发工具基础篇\"><a href=\"#Chrome开发工具基础篇\" class=\"headerlink\" title=\"Chrome开发工具基础篇\"></a>Chrome开发工具基础篇</h1><h2 id=\"第一部分-Elements\"><a href=\"#第一部分-Elements\" class=\"headerlink\" title=\"第一部分 Elements\"></a>第一部分 Elements</h2><p>在Elements面板中主要分为两大部分</p>\n<ol>\n<li>HTML DOM结构面板</li>\n<li>查看和操作DOM样式，结构面板<br><img src=\"http://p1.bpimg.com/567571/29af4009b16fde56.png\" style=\"width:500px;\"><br>在DOM结构面板中，每当你的鼠标移动到任何一个元素上，对应HTML视图中会高亮显示对应的元素，方便开发者查看<br><img src=\"http://p1.bqimg.com/567571/e78bc279fc4a516e.jpg\" style=\"width:500px;\"><br>而且选中的元素会在dev工具下面列出该元素在DOM结构中的关系<br><img src=\"http://p1.bqimg.com/567571/6e0096aa4b09b3bc.jpg\" style=\"width:500px;\"><br>选中DOM元素后，在属性栏中会列出该元素所有的CSS属性，</li>\n<li>可以输入属性名进行筛选，这样可以只看关注的属性名</li>\n<li>可以模拟元素的伪状态，方便调试</li>\n<li>属性定义的位置，点击可以跳转到源文件</li>\n<li>双击可以修改属性值，方便调试</li>\n</ol>\n<p><img src=\"http://p1.bqimg.com/567571/cbc415ed89665aa5.jpg\" style=\"width:500px;\"><br>Event Listeners面板可以查看当前DOM节点上绑定的事件，上面每个功能点意义如下</p>\n<ol>\n<li>Ancestors 是否显示祖先上绑定的事件，不选中时click下面的body项会消失</li>\n<li>Framework listeners (建议勾上)勾上后浏览器会处理主流框架的绑定事件，这样第4部分显示位置更加准确。</li>\n<li>该事件监听的元素</li>\n<li>事件定义的位置，点击可以跳转到源码</li>\n<li>是否是捕获阶段触发</li>\n<li>事件响应函数，鼠标放上去可以显示源码</li>\n</ol>\n<h2 id=\"第二部分-Console\"><a href=\"#第二部分-Console\" class=\"headerlink\" title=\"第二部分 Console\"></a>第二部分 Console</h2><p>Console控制台搜集程序运行信息，使用得当可以有如下功效</p>\n<ul>\n<li>更高「逼格」更快「开发调试」更强「进阶级的Frontender」</li>\n<li>Bug无处遁形「Console大法好」</li>\n</ul>\n<h3 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h3><p>大家都会用log，但鲜有人很好地利用console.error , console.warn 等将输出到控制台的信息进行分类整理。<br>他们功能区别不大，意义在于将输出到控制台的信息进行归类，或者说让它们更语义化。<br>各个所代表的语义如下：</p>\n<ul>\n<li>console.log：普通信息</li>\n<li>console.info：提示类信息</li>\n<li>console.error：错误信息</li>\n<li>console.warn：警示信息</li>\n</ul>\n<p>当合理使用上述log方法后，可以很方便地在控制台选择查看特定类型的信息。<br><img src=\"http://p1.bqimg.com/567571/3da10b3d896cb22d.jpg\" style=\"width:500px;\"><br>如果再配合console.group 与console.groupEnd，可以将这种分类管理的思想发挥到极致。这适合于在开发一个规模很大模块很多很复杂的Web APP时，将各自的log信息分组到以各自命名空间为名称的组里面。<br><img src=\"http://p1.bqimg.com/567571/d4a56519ad2fe3dc.jpg\" style=\"width:500px;\"><br>而关于console.log，早已被玩儿坏了。一切都源于Chrome提供了这么一个API：第一个参数可以包含一些格式化的指令比如%c。</p>\n<p>比如给hello world 做件漂亮的嫁衣再拉出来见人：<br><img src=\"http://p1.bqimg.com/567571/d5c3c75c91c1b80d.jpg\" style=\"width:500px;\"><br>除此，console.table 更是直接以表格的形式将数据输出<br><img src=\"http://p1.bqimg.com/567571/ec0faa9014024c4e.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-dir\"><a href=\"#console-dir\" class=\"headerlink\" title=\"console.dir\"></a>console.dir</h3><p>将DOM结点以JavaScript对象的形式输出到控制台<br>而console.log是直接将该DOM结点以DOM树的结构进行输出，与在元素审查时看到的结构是一致的。不同的展现形式，同样的优雅<br><img src=\"http://p1.bqimg.com/567571/9e3808263ac8bbfa.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-time-amp-console-timeEnd\"><a href=\"#console-time-amp-console-timeEnd\" class=\"headerlink\" title=\"console.time &amp; console.timeEnd\"></a>console.time &amp; console.timeEnd</h3><p>当做一些性能测试时，同样可以在这里很方便地进行。<br>比如需要考量一段代码执行的耗时情况时，可以用console.time与 console.timeEnd来做此事。</p>\n<p>这里借用官方文档的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.time(&quot;Array initialize&quot;);</span><br><span class=\"line\">var array= new Array(1000000);</span><br><span class=\"line\">for (var i = array.length - 1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">    array[i] = new Object();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">console.timeEnd(&quot;Array initialize&quot;);</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://p1.bqimg.com/567571/683676d430312b75.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"console-profile-amp-console-timeLime\"><a href=\"#console-profile-amp-console-timeLime\" class=\"headerlink\" title=\"console.profile &amp; console.timeLime\"></a>console.profile &amp; console.timeLime</h3><p>当想要查看CPU使用相关的信息时，可以使用console.profile配合 console.profileEnd来完成这个需求。<br>这一功能可以通过UI界面来完成，Chrome 开发者工具里面有个tab便是Profile。</p>\n<p>与此类似的功能还有console.timeLine配合 console.timeLineEnd,它的作用是开始记录一段时间轴，同样可以通过Chrome开发者工具里的Timeline 标签来进行相应操作。</p>\n<p>所以在我看来这两个方法有点鸡肋，因为都可以通过操作界面来完成。但至少他提供了一种命令行方式的交互，还是多了种姿势供选择吧。</p>\n<h3 id=\"console-trace\"><a href=\"#console-trace\" class=\"headerlink\" title=\"console.trace\"></a>console.trace</h3><p>堆栈跟踪相关的调试可以使用console.trace。这个同样可以通过UI界面完成。当代码被打断点后，可以在Call Stack面板中查看相关堆栈信息。</p>\n<p>上面介绍的都是挂在window.console这个对象下面的方法，统称为<a href=\"https://developer.chrome.com/devtools/docs/console-api\" target=\"_blank\" rel=\"noopener\">Console API</a>，接下来的这些方法确切地说应该叫命令，是Chrome内置提供，在控制台中使用的，他们统称为<a href=\"https://developer.chrome.com/devtools/docs/commandline-api\" target=\"_blank\" rel=\"noopener\">Command Line API</a>。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a>$_</h3><p>代表着最近一次命令返回的结果，并且可以作为一个变量使用在接下来的表达式中：<br><img src=\"http://p1.bqimg.com/567571/13f2e4a9976dda37.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"0-4\"><a href=\"#0-4\" class=\"headerlink\" title=\"$0-$4\"></a>$0-$4</h3><p>$0~$4则代表了最近5个你选择过的DOM节点<br>在页面右击选择审查元素，然后在弹出来的DOM结点树上面随便点选，这些被点过的节点会被记录下来，而$0会返回最近一次点选的DOM结点，以此类推，$1返回的是上上次点选的DOM节点，最多保存了5个，如果不够5个，则返回undefined。<br><img src=\"http://p1.bqimg.com/567571/b210e95b0a42bd79.gif\" style=\"width:500px;\"></p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"$\"></a>$</h3><p>$其实是document.querySelector()的别称，返回第一个选中的DOM节点</p>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"$$\"></a>$$</h3><p>$$调用document.querySelectorAll()函数，返回一个数组形式的DOM节点</p>\n<h3 id=\"copy\"><a href=\"#copy\" class=\"headerlink\" title=\"copy\"></a>copy</h3><p>通过此命令可以将在控制台获取到的内容复制到剪贴板。</p>\n<h3 id=\"inspect\"><a href=\"#inspect\" class=\"headerlink\" title=\"inspect\"></a>inspect</h3><p>传入一个DOM节点，自动转到Elements面板中对应node的位置，是不是很方便呐<br><img src=\"http://p1.bqimg.com/567571/cb75164513a39d13.png\" style=\"width:500px;\"></p>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p>Resources部分较简单，他主要向我们展示了本界面所加载的资源列表。还有cookie和local storage 、SESSION 等本地存储信息，在这里，我们可以自由地修改、增加、删除本地存储。<br><img src=\"http://p1.bqimg.com/567571/16443a8512ef42d0.jpg\" style=\"width:500px;\"></p>\n<h2 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h2><p>Network是一个监控当前网页所有的http请求的面版，它主体部分展示的是每个http请求，每个字段表示着该请求的不同属性和状态<br><img src=\"http://p1.bqimg.com/567571/dbf08c4c84988be2.jpg\" style=\"width:500px;\"></p>\n<ul>\n<li>Name：请求文件名称</li>\n<li>Method：方法（常见的是get post）</li>\n<li>Status：请求完成的状态</li>\n<li>Type：请求的类型</li>\n<li>Initiator：请求源也就是说该链接通过什么发送（常见的是Parser、Script）</li>\n<li>Size：下载文件或者请求占的资源大小</li>\n<li>Time：请求或下载的时间</li>\n<li>Timeline：该链接在发送过程中的时间状态轴（我们可以把鼠标移动到这些红红绿绿的时间轴上，对应的会有它的详细信息：开始下载时间，等待加载时间，自身下载耗时）</li>\n</ul>\n<p><img src=\"http://p1.bqimg.com/567571/1f111ab517712d86.jpg\" style=\"width:500px;\"></p>\n<ul>\n<li>Stalled: 即请求处于阻塞状态, 如之前有很多请求没处理完，而浏览器对同域并发请求有限制，导致后面的请求处于阻塞状态</li>\n<li>Proxy negotiation: 与代理服务器的连接通信阶段</li>\n<li>DNS Lookup: DNS查找阶段（本请求未涉及，只有在首次访问一个新的域名的时候才会有该阶段）</li>\n<li>Initial Connection / connecting: 建立连接的过程，包含TCP握手/重试，商定SSL</li>\n<li>SSL: 完成SSL握手阶段</li>\n<li>Request sent: 发送请求，通常只要不到1ms的时间</li>\n<li>Waiting(TTFB): 发出请求后等待服务端响应的时间，响应时间极为第一个字节发送过来的时间</li>\n<li>Content Download: 接收响应数据的时间</li>\n</ul>"},{"title":"Chrome Developers Tools调试篇","date":"2016-05-16T08:32:00.000Z","_content":"带领大家进入一个不一样的DEBUG世界\n\n<!--more-->\n\n# Chrome开发工具调试篇\n上一篇给大家介绍了一下Chrome Dev Tools的基本用法，这篇交大家如何调试javascript程序\n\n## 目录面板\n\n<img src='http://p1.bqimg.com/567571/e69fb6c1b50b80e9.jpg' style=\"width:500px;\">\n可以看到上图有3个导航条，他们都存有不同域名和环境下的js和css文件。\nSources:包含当前网页用到的资源目录\nContent scripts: 插件程序所在的位置\nSnippets: 它的主要作用可以使得我们编写一些项目的测试代码时提供便捷，你知道，如果你在编辑器上编写这些代码，在发布时你必须为它们添加注释符号或者手动删除它们，而在浏览器上编写就不需要这样繁琐了。\n\n还有一个很有用的特性就是：Workspace，这个特性可以把dev tools变成代码编辑工具，首先我们来看看怎么使用这个特性\n<img src='http://p1.bqimg.com/567571/3920146e9d266dc5.gif' style=\"width:500px;\">\n1. 在sources面板右键，选择add folder to workspace,选中项目目录\n2. 随便选择一个项目文件，右键选择map to file system resource，选中相应的文件，这样所有的文件都会根据目录依次对应起来。\n\n这样几步后workspace特性就算使用起来了，现在编辑文件都会保存到文件当中非常方便，而且当你在elemnt面板调试css时也会同步将值保存到文件当中。\n\n\n## 调试面板\n\n### 断点方式\n打开需要调试的js文件，并且在对应的行数上右键可以看到以下选择项\n<img src='http://p1.bqimg.com/567571/9add632b45c8ed26.jpg' style=\"width:500px;\">\n下面来依次说明选项的作用：\n1.Blackbox Script : 黑盒文件调试法，将此文件设置为黑盒，这样在调试时将不会进入这个文件\n<img src='http://p1.bqimg.com/567571/2d9b88b9448aa1f2.gif' style=\"width:500px;\">\n<img src='http://p1.bqimg.com/567571/2ab7aff5f6143dd0.gif' style=\"width:500px;\">\n可以看到，黑盒模式下的文件用户是无法进入的，所以在调试时可以将一些库文件设置为黑盒模式，这样调试将会清爽很多。\n2.Add breakpoint ： 在这行添加断电\n3.Add conditional breakpoint : 添加条件断点，只有在满足此条件的情况下才会断住程序\n<img src='http://p1.bqimg.com/567571/2e5acf20be9e8265.jpg' style=\"width:500px;\">\n\n### 断点信息\n\n<img src='http://p1.bqimg.com/567571/f80bb26070ecb61a.jpg' style=\"width:300px;\">\n最上面一排按钮是控制当前断点，他们分别代表\n1、停止断点调试\n2、不跳入函数中去，继续执行下一行代码（F10）\n3、跳入函数中去（F11）\n4、从执行的函数中跳出\n5、禁用所有的断点，不做任何调试\n6、程序运行时遇到异常时是否中断的开关\n7、断点是处以异步操作内部时比如ajax请求，是否记录异步操作之前的堆栈信息\n\nwatch面板，可以自定义表达式并查看结果\n<img src='http://p1.bqimg.com/567571/24e1d4f8b74009f9.jpg' style=\"width:300px;\">\n\ncall stack面板，记录当前断点的堆栈信息，并且可以通过点击堆栈还原到上一个调用现场.\n<img src='http://p1.bqimg.com/567571/93d049609bfd4139.gif' style=\"width:500px;\">\n这里也可以配合黑盒模式，去掉jquery库的干扰信息\n<img src='http://p1.bqimg.com/567571/99e998a3dc0996eb.gif' style=\"width:500px;\">\n\nScope，记录当前断点变量的值\nBreakponts,记录所有断点的位置\nDom breakpoints,添加的Dom监控信息。\nXHR breakpoints 击+ 并输入 URL 包含的字符串即可监听该 URL 的 Ajax 请求，输入内容就相当于 URL 的过滤器。如果什么都不填，那么就监听所有 XHR 请求。一旦 XHR 调用触发时就会在 request.send() 的地方中断。\nEvent Listener Breakpoints 为网页添加各种类型的断点信息。如选中了Mouse中的某一项（click），当你在网页上出发这个动作（单击网页任意地方），你浏览器就是立刻断点监控该事件\n","source":"_posts/ChromeDevTools2.md","raw":"title: Chrome Developers Tools调试篇\ndate: 2016-5-16 16:32:00\ncategories: scliuyang\ntags:\n- Chrome Developers Tools\n- Debug\n- DevTools\n---\n带领大家进入一个不一样的DEBUG世界\n\n<!--more-->\n\n# Chrome开发工具调试篇\n上一篇给大家介绍了一下Chrome Dev Tools的基本用法，这篇交大家如何调试javascript程序\n\n## 目录面板\n\n<img src='http://p1.bqimg.com/567571/e69fb6c1b50b80e9.jpg' style=\"width:500px;\">\n可以看到上图有3个导航条，他们都存有不同域名和环境下的js和css文件。\nSources:包含当前网页用到的资源目录\nContent scripts: 插件程序所在的位置\nSnippets: 它的主要作用可以使得我们编写一些项目的测试代码时提供便捷，你知道，如果你在编辑器上编写这些代码，在发布时你必须为它们添加注释符号或者手动删除它们，而在浏览器上编写就不需要这样繁琐了。\n\n还有一个很有用的特性就是：Workspace，这个特性可以把dev tools变成代码编辑工具，首先我们来看看怎么使用这个特性\n<img src='http://p1.bqimg.com/567571/3920146e9d266dc5.gif' style=\"width:500px;\">\n1. 在sources面板右键，选择add folder to workspace,选中项目目录\n2. 随便选择一个项目文件，右键选择map to file system resource，选中相应的文件，这样所有的文件都会根据目录依次对应起来。\n\n这样几步后workspace特性就算使用起来了，现在编辑文件都会保存到文件当中非常方便，而且当你在elemnt面板调试css时也会同步将值保存到文件当中。\n\n\n## 调试面板\n\n### 断点方式\n打开需要调试的js文件，并且在对应的行数上右键可以看到以下选择项\n<img src='http://p1.bqimg.com/567571/9add632b45c8ed26.jpg' style=\"width:500px;\">\n下面来依次说明选项的作用：\n1.Blackbox Script : 黑盒文件调试法，将此文件设置为黑盒，这样在调试时将不会进入这个文件\n<img src='http://p1.bqimg.com/567571/2d9b88b9448aa1f2.gif' style=\"width:500px;\">\n<img src='http://p1.bqimg.com/567571/2ab7aff5f6143dd0.gif' style=\"width:500px;\">\n可以看到，黑盒模式下的文件用户是无法进入的，所以在调试时可以将一些库文件设置为黑盒模式，这样调试将会清爽很多。\n2.Add breakpoint ： 在这行添加断电\n3.Add conditional breakpoint : 添加条件断点，只有在满足此条件的情况下才会断住程序\n<img src='http://p1.bqimg.com/567571/2e5acf20be9e8265.jpg' style=\"width:500px;\">\n\n### 断点信息\n\n<img src='http://p1.bqimg.com/567571/f80bb26070ecb61a.jpg' style=\"width:300px;\">\n最上面一排按钮是控制当前断点，他们分别代表\n1、停止断点调试\n2、不跳入函数中去，继续执行下一行代码（F10）\n3、跳入函数中去（F11）\n4、从执行的函数中跳出\n5、禁用所有的断点，不做任何调试\n6、程序运行时遇到异常时是否中断的开关\n7、断点是处以异步操作内部时比如ajax请求，是否记录异步操作之前的堆栈信息\n\nwatch面板，可以自定义表达式并查看结果\n<img src='http://p1.bqimg.com/567571/24e1d4f8b74009f9.jpg' style=\"width:300px;\">\n\ncall stack面板，记录当前断点的堆栈信息，并且可以通过点击堆栈还原到上一个调用现场.\n<img src='http://p1.bqimg.com/567571/93d049609bfd4139.gif' style=\"width:500px;\">\n这里也可以配合黑盒模式，去掉jquery库的干扰信息\n<img src='http://p1.bqimg.com/567571/99e998a3dc0996eb.gif' style=\"width:500px;\">\n\nScope，记录当前断点变量的值\nBreakponts,记录所有断点的位置\nDom breakpoints,添加的Dom监控信息。\nXHR breakpoints 击+ 并输入 URL 包含的字符串即可监听该 URL 的 Ajax 请求，输入内容就相当于 URL 的过滤器。如果什么都不填，那么就监听所有 XHR 请求。一旦 XHR 调用触发时就会在 request.send() 的地方中断。\nEvent Listener Breakpoints 为网页添加各种类型的断点信息。如选中了Mouse中的某一项（click），当你在网页上出发这个动作（单击网页任意地方），你浏览器就是立刻断点监控该事件\n","slug":"ChromeDevTools2","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq180006jc5bsiojiile","content":"<p>带领大家进入一个不一样的DEBUG世界</p>\n<a id=\"more\"></a>\n<h1 id=\"Chrome开发工具调试篇\"><a href=\"#Chrome开发工具调试篇\" class=\"headerlink\" title=\"Chrome开发工具调试篇\"></a>Chrome开发工具调试篇</h1><p>上一篇给大家介绍了一下Chrome Dev Tools的基本用法，这篇交大家如何调试javascript程序</p>\n<h2 id=\"目录面板\"><a href=\"#目录面板\" class=\"headerlink\" title=\"目录面板\"></a>目录面板</h2><p><img src=\"http://p1.bqimg.com/567571/e69fb6c1b50b80e9.jpg\" style=\"width:500px;\"><br>可以看到上图有3个导航条，他们都存有不同域名和环境下的js和css文件。<br>Sources:包含当前网页用到的资源目录<br>Content scripts: 插件程序所在的位置<br>Snippets: 它的主要作用可以使得我们编写一些项目的测试代码时提供便捷，你知道，如果你在编辑器上编写这些代码，在发布时你必须为它们添加注释符号或者手动删除它们，而在浏览器上编写就不需要这样繁琐了。</p>\n<p>还有一个很有用的特性就是：Workspace，这个特性可以把dev tools变成代码编辑工具，首先我们来看看怎么使用这个特性<br><img src=\"http://p1.bqimg.com/567571/3920146e9d266dc5.gif\" style=\"width:500px;\"></p>\n<ol>\n<li>在sources面板右键，选择add folder to workspace,选中项目目录</li>\n<li>随便选择一个项目文件，右键选择map to file system resource，选中相应的文件，这样所有的文件都会根据目录依次对应起来。</li>\n</ol>\n<p>这样几步后workspace特性就算使用起来了，现在编辑文件都会保存到文件当中非常方便，而且当你在elemnt面板调试css时也会同步将值保存到文件当中。</p>\n<h2 id=\"调试面板\"><a href=\"#调试面板\" class=\"headerlink\" title=\"调试面板\"></a>调试面板</h2><h3 id=\"断点方式\"><a href=\"#断点方式\" class=\"headerlink\" title=\"断点方式\"></a>断点方式</h3><p>打开需要调试的js文件，并且在对应的行数上右键可以看到以下选择项<br><img src=\"http://p1.bqimg.com/567571/9add632b45c8ed26.jpg\" style=\"width:500px;\"><br>下面来依次说明选项的作用：<br>1.Blackbox Script : 黑盒文件调试法，将此文件设置为黑盒，这样在调试时将不会进入这个文件<br><img src=\"http://p1.bqimg.com/567571/2d9b88b9448aa1f2.gif\" style=\"width:500px;\"><br><img src=\"http://p1.bqimg.com/567571/2ab7aff5f6143dd0.gif\" style=\"width:500px;\"><br>可以看到，黑盒模式下的文件用户是无法进入的，所以在调试时可以将一些库文件设置为黑盒模式，这样调试将会清爽很多。<br>2.Add breakpoint ： 在这行添加断电<br>3.Add conditional breakpoint : 添加条件断点，只有在满足此条件的情况下才会断住程序<br><img src=\"http://p1.bqimg.com/567571/2e5acf20be9e8265.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"断点信息\"><a href=\"#断点信息\" class=\"headerlink\" title=\"断点信息\"></a>断点信息</h3><p><img src=\"http://p1.bqimg.com/567571/f80bb26070ecb61a.jpg\" style=\"width:300px;\"><br>最上面一排按钮是控制当前断点，他们分别代表<br>1、停止断点调试<br>2、不跳入函数中去，继续执行下一行代码（F10）<br>3、跳入函数中去（F11）<br>4、从执行的函数中跳出<br>5、禁用所有的断点，不做任何调试<br>6、程序运行时遇到异常时是否中断的开关<br>7、断点是处以异步操作内部时比如ajax请求，是否记录异步操作之前的堆栈信息</p>\n<p>watch面板，可以自定义表达式并查看结果<br><img src=\"http://p1.bqimg.com/567571/24e1d4f8b74009f9.jpg\" style=\"width:300px;\"></p>\n<p>call stack面板，记录当前断点的堆栈信息，并且可以通过点击堆栈还原到上一个调用现场.<br><img src=\"http://p1.bqimg.com/567571/93d049609bfd4139.gif\" style=\"width:500px;\"><br>这里也可以配合黑盒模式，去掉jquery库的干扰信息<br><img src=\"http://p1.bqimg.com/567571/99e998a3dc0996eb.gif\" style=\"width:500px;\"></p>\n<p>Scope，记录当前断点变量的值<br>Breakponts,记录所有断点的位置<br>Dom breakpoints,添加的Dom监控信息。<br>XHR breakpoints 击+ 并输入 URL 包含的字符串即可监听该 URL 的 Ajax 请求，输入内容就相当于 URL 的过滤器。如果什么都不填，那么就监听所有 XHR 请求。一旦 XHR 调用触发时就会在 request.send() 的地方中断。<br>Event Listener Breakpoints 为网页添加各种类型的断点信息。如选中了Mouse中的某一项（click），当你在网页上出发这个动作（单击网页任意地方），你浏览器就是立刻断点监控该事件</p>\n","site":{"data":{}},"excerpt":"<p>带领大家进入一个不一样的DEBUG世界</p>","more":"<h1 id=\"Chrome开发工具调试篇\"><a href=\"#Chrome开发工具调试篇\" class=\"headerlink\" title=\"Chrome开发工具调试篇\"></a>Chrome开发工具调试篇</h1><p>上一篇给大家介绍了一下Chrome Dev Tools的基本用法，这篇交大家如何调试javascript程序</p>\n<h2 id=\"目录面板\"><a href=\"#目录面板\" class=\"headerlink\" title=\"目录面板\"></a>目录面板</h2><p><img src=\"http://p1.bqimg.com/567571/e69fb6c1b50b80e9.jpg\" style=\"width:500px;\"><br>可以看到上图有3个导航条，他们都存有不同域名和环境下的js和css文件。<br>Sources:包含当前网页用到的资源目录<br>Content scripts: 插件程序所在的位置<br>Snippets: 它的主要作用可以使得我们编写一些项目的测试代码时提供便捷，你知道，如果你在编辑器上编写这些代码，在发布时你必须为它们添加注释符号或者手动删除它们，而在浏览器上编写就不需要这样繁琐了。</p>\n<p>还有一个很有用的特性就是：Workspace，这个特性可以把dev tools变成代码编辑工具，首先我们来看看怎么使用这个特性<br><img src=\"http://p1.bqimg.com/567571/3920146e9d266dc5.gif\" style=\"width:500px;\"></p>\n<ol>\n<li>在sources面板右键，选择add folder to workspace,选中项目目录</li>\n<li>随便选择一个项目文件，右键选择map to file system resource，选中相应的文件，这样所有的文件都会根据目录依次对应起来。</li>\n</ol>\n<p>这样几步后workspace特性就算使用起来了，现在编辑文件都会保存到文件当中非常方便，而且当你在elemnt面板调试css时也会同步将值保存到文件当中。</p>\n<h2 id=\"调试面板\"><a href=\"#调试面板\" class=\"headerlink\" title=\"调试面板\"></a>调试面板</h2><h3 id=\"断点方式\"><a href=\"#断点方式\" class=\"headerlink\" title=\"断点方式\"></a>断点方式</h3><p>打开需要调试的js文件，并且在对应的行数上右键可以看到以下选择项<br><img src=\"http://p1.bqimg.com/567571/9add632b45c8ed26.jpg\" style=\"width:500px;\"><br>下面来依次说明选项的作用：<br>1.Blackbox Script : 黑盒文件调试法，将此文件设置为黑盒，这样在调试时将不会进入这个文件<br><img src=\"http://p1.bqimg.com/567571/2d9b88b9448aa1f2.gif\" style=\"width:500px;\"><br><img src=\"http://p1.bqimg.com/567571/2ab7aff5f6143dd0.gif\" style=\"width:500px;\"><br>可以看到，黑盒模式下的文件用户是无法进入的，所以在调试时可以将一些库文件设置为黑盒模式，这样调试将会清爽很多。<br>2.Add breakpoint ： 在这行添加断电<br>3.Add conditional breakpoint : 添加条件断点，只有在满足此条件的情况下才会断住程序<br><img src=\"http://p1.bqimg.com/567571/2e5acf20be9e8265.jpg\" style=\"width:500px;\"></p>\n<h3 id=\"断点信息\"><a href=\"#断点信息\" class=\"headerlink\" title=\"断点信息\"></a>断点信息</h3><p><img src=\"http://p1.bqimg.com/567571/f80bb26070ecb61a.jpg\" style=\"width:300px;\"><br>最上面一排按钮是控制当前断点，他们分别代表<br>1、停止断点调试<br>2、不跳入函数中去，继续执行下一行代码（F10）<br>3、跳入函数中去（F11）<br>4、从执行的函数中跳出<br>5、禁用所有的断点，不做任何调试<br>6、程序运行时遇到异常时是否中断的开关<br>7、断点是处以异步操作内部时比如ajax请求，是否记录异步操作之前的堆栈信息</p>\n<p>watch面板，可以自定义表达式并查看结果<br><img src=\"http://p1.bqimg.com/567571/24e1d4f8b74009f9.jpg\" style=\"width:300px;\"></p>\n<p>call stack面板，记录当前断点的堆栈信息，并且可以通过点击堆栈还原到上一个调用现场.<br><img src=\"http://p1.bqimg.com/567571/93d049609bfd4139.gif\" style=\"width:500px;\"><br>这里也可以配合黑盒模式，去掉jquery库的干扰信息<br><img src=\"http://p1.bqimg.com/567571/99e998a3dc0996eb.gif\" style=\"width:500px;\"></p>\n<p>Scope，记录当前断点变量的值<br>Breakponts,记录所有断点的位置<br>Dom breakpoints,添加的Dom监控信息。<br>XHR breakpoints 击+ 并输入 URL 包含的字符串即可监听该 URL 的 Ajax 请求，输入内容就相当于 URL 的过滤器。如果什么都不填，那么就监听所有 XHR 请求。一旦 XHR 调用触发时就会在 request.send() 的地方中断。<br>Event Listener Breakpoints 为网页添加各种类型的断点信息。如选中了Mouse中的某一项（click），当你在网页上出发这个动作（单击网页任意地方），你浏览器就是立刻断点监控该事件</p>"},{"title":"内存泄露分析","date":"2016-05-16T08:32:00.000Z","_content":"通过Devtools判断页面的内存泄露\n\n<!--more-->\n\n# 判断页面是否引起内存泄露\n通过上一节的timeline，并且勾上`Memory`选项，多运行几次如下代码,[github](https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example1.html)\n\n```\nvar x = [];\n\nfunction createSomeNodes() {\n    var div,\n        i = 100,\n        frag = document.createDocumentFragment();\n    for (;i > 0; i--) {\n        div = document.createElement(\"div\");\n        div.appendChild(document.createTextNode(i + \" - \"+ new Date().toTimeString()));\n        frag.appendChild(div);\n    }\n    document.getElementById(\"nodes\").appendChild(frag);\n}\nfunction grow() {\n    x.push(new Array(1000000).join('x'));\n    createSomeNodes();\n    setTimeout(grow,1000);\n}\n\n```\n我们来看看点击了无数次后内存占用情况\n<img src='http://i1.piimg.com/567571/8b2e3c3c147bd74f.jpg'>\n然后我们来看一张正常的内存图\n<img src='http://i1.piimg.com/567571/103ce24b5193aa03.jpg'>\n\n通过对比我们可以看到内存泄露有一个很明显的上扬曲线，而且不会随着时间和垃圾回收下降，这就证明有内存泄露的存在。\n\n或者也可以通过`profiles`面板的Record Heap Allocations来观察内存泄露情况\n<img src='http://i1.piimg.com/567571/9c35eb364980009a.gif'>\n可以看到很多蓝色的柱子，而蓝色的柱子代表此次垃圾回收没有回收掉的内存部分，蓝色柱子越大越多代表内存泄露越严重\n\n# 定位问题\n\n打开`profiles`面板，在运行程序前先获取一次内存快照,接着运行程序等待一段时间在多获取几次内存快照。\n<img src='http://i1.piimg.com/567571/3c45511070837eca.gif'>\n\n我们首先解释下内存快照里的意思\n<img src='http://i1.piimg.com/567571/83bf78f10698e221.jpg'>\n\n1. constructor 构造函数对象的名称\n2. distance 对象到回收根的距离\n3. Objects Count 对象数量\n4. Shallow Size Shallow Size代表了对象直接持有的内存大小。一个标准的JS对象通常会持有用于描述自身逻辑和存储直接值（属性值）的内存。 通常情况下应该只有字符串和数组类型可能拥有一个较大的Shallow Size。\n5. Retained Size Retained Size代表了当前对象所引用的其他对象占用的内存大小. 当当前对象被销毁时, 这一部分的内存会被释放.\n\n然后我们点击Summary 选择 Comparison(对比)\n<img src='http://i1.piimg.com/567571/8da2bf131f481708.jpg'>\n可以看到String&HTMLDivElement占有极大的内存,对比我们的代码确实是字符串和div的长期持有导致内存泄露\n\n我们点击String中的一条\n<img src='http://i1.piimg.com/567571/496e9eaebe920320.jpg'>\n可以看到 `x in Window / localhost:63342 @473517` 可以定位到window上的x变量导致的内存泄露\n\n# 总结\n内存泄露问题一般表现在使用一段时间后页面卡顿，在复现场景后通过timeline来确定问题的，然后结合内存快照定位到具体的泄露点。","source":"_posts/ChromeDevTools4.md","raw":"title: 内存泄露分析\ndate: 2016-5-16 16:32:00\ncategories: scliuyang\ntags:\n- Chrome Developers Tools\n- Debug\n- DevTools\n---\n通过Devtools判断页面的内存泄露\n\n<!--more-->\n\n# 判断页面是否引起内存泄露\n通过上一节的timeline，并且勾上`Memory`选项，多运行几次如下代码,[github](https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example1.html)\n\n```\nvar x = [];\n\nfunction createSomeNodes() {\n    var div,\n        i = 100,\n        frag = document.createDocumentFragment();\n    for (;i > 0; i--) {\n        div = document.createElement(\"div\");\n        div.appendChild(document.createTextNode(i + \" - \"+ new Date().toTimeString()));\n        frag.appendChild(div);\n    }\n    document.getElementById(\"nodes\").appendChild(frag);\n}\nfunction grow() {\n    x.push(new Array(1000000).join('x'));\n    createSomeNodes();\n    setTimeout(grow,1000);\n}\n\n```\n我们来看看点击了无数次后内存占用情况\n<img src='http://i1.piimg.com/567571/8b2e3c3c147bd74f.jpg'>\n然后我们来看一张正常的内存图\n<img src='http://i1.piimg.com/567571/103ce24b5193aa03.jpg'>\n\n通过对比我们可以看到内存泄露有一个很明显的上扬曲线，而且不会随着时间和垃圾回收下降，这就证明有内存泄露的存在。\n\n或者也可以通过`profiles`面板的Record Heap Allocations来观察内存泄露情况\n<img src='http://i1.piimg.com/567571/9c35eb364980009a.gif'>\n可以看到很多蓝色的柱子，而蓝色的柱子代表此次垃圾回收没有回收掉的内存部分，蓝色柱子越大越多代表内存泄露越严重\n\n# 定位问题\n\n打开`profiles`面板，在运行程序前先获取一次内存快照,接着运行程序等待一段时间在多获取几次内存快照。\n<img src='http://i1.piimg.com/567571/3c45511070837eca.gif'>\n\n我们首先解释下内存快照里的意思\n<img src='http://i1.piimg.com/567571/83bf78f10698e221.jpg'>\n\n1. constructor 构造函数对象的名称\n2. distance 对象到回收根的距离\n3. Objects Count 对象数量\n4. Shallow Size Shallow Size代表了对象直接持有的内存大小。一个标准的JS对象通常会持有用于描述自身逻辑和存储直接值（属性值）的内存。 通常情况下应该只有字符串和数组类型可能拥有一个较大的Shallow Size。\n5. Retained Size Retained Size代表了当前对象所引用的其他对象占用的内存大小. 当当前对象被销毁时, 这一部分的内存会被释放.\n\n然后我们点击Summary 选择 Comparison(对比)\n<img src='http://i1.piimg.com/567571/8da2bf131f481708.jpg'>\n可以看到String&HTMLDivElement占有极大的内存,对比我们的代码确实是字符串和div的长期持有导致内存泄露\n\n我们点击String中的一条\n<img src='http://i1.piimg.com/567571/496e9eaebe920320.jpg'>\n可以看到 `x in Window / localhost:63342 @473517` 可以定位到window上的x变量导致的内存泄露\n\n# 总结\n内存泄露问题一般表现在使用一段时间后页面卡顿，在复现场景后通过timeline来确定问题的，然后结合内存快照定位到具体的泄露点。","slug":"ChromeDevTools4","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq190007jc5bvv64aqyq","content":"<p>通过Devtools判断页面的内存泄露</p>\n<a id=\"more\"></a>\n<h1 id=\"判断页面是否引起内存泄露\"><a href=\"#判断页面是否引起内存泄露\" class=\"headerlink\" title=\"判断页面是否引起内存泄露\"></a>判断页面是否引起内存泄露</h1><p>通过上一节的timeline，并且勾上<code>Memory</code>选项，多运行几次如下代码,<a href=\"https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example1.html\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = [];</span><br><span class=\"line\"></span><br><span class=\"line\">function createSomeNodes() &#123;</span><br><span class=\"line\">    var div,</span><br><span class=\"line\">        i = 100,</span><br><span class=\"line\">        frag = document.createDocumentFragment();</span><br><span class=\"line\">    for (;i &gt; 0; i--) &#123;</span><br><span class=\"line\">        div = document.createElement(&quot;div&quot;);</span><br><span class=\"line\">        div.appendChild(document.createTextNode(i + &quot; - &quot;+ new Date().toTimeString()));</span><br><span class=\"line\">        frag.appendChild(div);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    document.getElementById(&quot;nodes&quot;).appendChild(frag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function grow() &#123;</span><br><span class=\"line\">    x.push(new Array(1000000).join(&apos;x&apos;));</span><br><span class=\"line\">    createSomeNodes();</span><br><span class=\"line\">    setTimeout(grow,1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看看点击了无数次后内存占用情况<br><img src=\"http://i1.piimg.com/567571/8b2e3c3c147bd74f.jpg\"><br>然后我们来看一张正常的内存图<br><img src=\"http://i1.piimg.com/567571/103ce24b5193aa03.jpg\"></p>\n<p>通过对比我们可以看到内存泄露有一个很明显的上扬曲线，而且不会随着时间和垃圾回收下降，这就证明有内存泄露的存在。</p>\n<p>或者也可以通过<code>profiles</code>面板的Record Heap Allocations来观察内存泄露情况<br><img src=\"http://i1.piimg.com/567571/9c35eb364980009a.gif\"><br>可以看到很多蓝色的柱子，而蓝色的柱子代表此次垃圾回收没有回收掉的内存部分，蓝色柱子越大越多代表内存泄露越严重</p>\n<h1 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h1><p>打开<code>profiles</code>面板，在运行程序前先获取一次内存快照,接着运行程序等待一段时间在多获取几次内存快照。<br><img src=\"http://i1.piimg.com/567571/3c45511070837eca.gif\"></p>\n<p>我们首先解释下内存快照里的意思<br><img src=\"http://i1.piimg.com/567571/83bf78f10698e221.jpg\"></p>\n<ol>\n<li>constructor 构造函数对象的名称</li>\n<li>distance 对象到回收根的距离</li>\n<li>Objects Count 对象数量</li>\n<li>Shallow Size Shallow Size代表了对象直接持有的内存大小。一个标准的JS对象通常会持有用于描述自身逻辑和存储直接值（属性值）的内存。 通常情况下应该只有字符串和数组类型可能拥有一个较大的Shallow Size。</li>\n<li>Retained Size Retained Size代表了当前对象所引用的其他对象占用的内存大小. 当当前对象被销毁时, 这一部分的内存会被释放.</li>\n</ol>\n<p>然后我们点击Summary 选择 Comparison(对比)<br><img src=\"http://i1.piimg.com/567571/8da2bf131f481708.jpg\"><br>可以看到String&amp;HTMLDivElement占有极大的内存,对比我们的代码确实是字符串和div的长期持有导致内存泄露</p>\n<p>我们点击String中的一条<br><img src=\"http://i1.piimg.com/567571/496e9eaebe920320.jpg\"><br>可以看到 <code>x in Window / localhost:63342 @473517</code> 可以定位到window上的x变量导致的内存泄露</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存泄露问题一般表现在使用一段时间后页面卡顿，在复现场景后通过timeline来确定问题的，然后结合内存快照定位到具体的泄露点。</p>\n","site":{"data":{}},"excerpt":"<p>通过Devtools判断页面的内存泄露</p>","more":"<h1 id=\"判断页面是否引起内存泄露\"><a href=\"#判断页面是否引起内存泄露\" class=\"headerlink\" title=\"判断页面是否引起内存泄露\"></a>判断页面是否引起内存泄露</h1><p>通过上一节的timeline，并且勾上<code>Memory</code>选项，多运行几次如下代码,<a href=\"https://github.com/GoogleChrome/devtools-docs/blob/master/docs/demos/memory/example1.html\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = [];</span><br><span class=\"line\"></span><br><span class=\"line\">function createSomeNodes() &#123;</span><br><span class=\"line\">    var div,</span><br><span class=\"line\">        i = 100,</span><br><span class=\"line\">        frag = document.createDocumentFragment();</span><br><span class=\"line\">    for (;i &gt; 0; i--) &#123;</span><br><span class=\"line\">        div = document.createElement(&quot;div&quot;);</span><br><span class=\"line\">        div.appendChild(document.createTextNode(i + &quot; - &quot;+ new Date().toTimeString()));</span><br><span class=\"line\">        frag.appendChild(div);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    document.getElementById(&quot;nodes&quot;).appendChild(frag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function grow() &#123;</span><br><span class=\"line\">    x.push(new Array(1000000).join(&apos;x&apos;));</span><br><span class=\"line\">    createSomeNodes();</span><br><span class=\"line\">    setTimeout(grow,1000);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们来看看点击了无数次后内存占用情况<br><img src=\"http://i1.piimg.com/567571/8b2e3c3c147bd74f.jpg\"><br>然后我们来看一张正常的内存图<br><img src=\"http://i1.piimg.com/567571/103ce24b5193aa03.jpg\"></p>\n<p>通过对比我们可以看到内存泄露有一个很明显的上扬曲线，而且不会随着时间和垃圾回收下降，这就证明有内存泄露的存在。</p>\n<p>或者也可以通过<code>profiles</code>面板的Record Heap Allocations来观察内存泄露情况<br><img src=\"http://i1.piimg.com/567571/9c35eb364980009a.gif\"><br>可以看到很多蓝色的柱子，而蓝色的柱子代表此次垃圾回收没有回收掉的内存部分，蓝色柱子越大越多代表内存泄露越严重</p>\n<h1 id=\"定位问题\"><a href=\"#定位问题\" class=\"headerlink\" title=\"定位问题\"></a>定位问题</h1><p>打开<code>profiles</code>面板，在运行程序前先获取一次内存快照,接着运行程序等待一段时间在多获取几次内存快照。<br><img src=\"http://i1.piimg.com/567571/3c45511070837eca.gif\"></p>\n<p>我们首先解释下内存快照里的意思<br><img src=\"http://i1.piimg.com/567571/83bf78f10698e221.jpg\"></p>\n<ol>\n<li>constructor 构造函数对象的名称</li>\n<li>distance 对象到回收根的距离</li>\n<li>Objects Count 对象数量</li>\n<li>Shallow Size Shallow Size代表了对象直接持有的内存大小。一个标准的JS对象通常会持有用于描述自身逻辑和存储直接值（属性值）的内存。 通常情况下应该只有字符串和数组类型可能拥有一个较大的Shallow Size。</li>\n<li>Retained Size Retained Size代表了当前对象所引用的其他对象占用的内存大小. 当当前对象被销毁时, 这一部分的内存会被释放.</li>\n</ol>\n<p>然后我们点击Summary 选择 Comparison(对比)<br><img src=\"http://i1.piimg.com/567571/8da2bf131f481708.jpg\"><br>可以看到String&amp;HTMLDivElement占有极大的内存,对比我们的代码确实是字符串和div的长期持有导致内存泄露</p>\n<p>我们点击String中的一条<br><img src=\"http://i1.piimg.com/567571/496e9eaebe920320.jpg\"><br>可以看到 <code>x in Window / localhost:63342 @473517</code> 可以定位到window上的x变量导致的内存泄露</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>内存泄露问题一般表现在使用一段时间后页面卡顿，在复现场景后通过timeline来确定问题的，然后结合内存快照定位到具体的泄露点。</p>"},{"title":"如何进行高效的提问","date":"2016-11-02T08:32:00.000Z","_content":"高效提问是有效沟通的第一步，在工作中经常碰到因为低效提问或无效提问浪费大量的时间，增加沟通成本，本文希望能提高大家提问水平，给大家一点启发。\n\n<!--more-->\n\n## 好坏问题对比\n\n`坏问题1：在不在？`\n\n\n> 小明: 在不在？\t10:23\n> 小红: 在。\t11:01\n> 小明: 想请教你一个问题可以不？\t11:50\n> 小红: 可以，说吧。\t14:20\n> 小明: XX项目是你在维护么？ 15:00\n> 小红: 是的。 15:20\n> 小明: 巴拉巴拉开始说问题 15:30\n\n点评： 首先小明从上午10:23开始提问，一直到下午15:30才真正的描述问题，此前一直是在进行一些没有啥营养的话，浪费精力。\n\n`改进版`\n\n> 小明: 你好，请问你是XX项目的维护人么？我这里有XXX问题，无法找到解决方式，能提供下帮助么？ 10:23\n> 小红: 这个问题可以参照XXX文档即可解决 11:02\n\n\n`坏问题2：不看提示，张嘴就问`\n\n> 小明：帮忙看下XX项目发布失败\n> 小张：给下发布日志\n> 小明：XXXX\n> 小张：日志上说了XX版本有误，更换下就好了\n\n点评：一些问题其实已经在提示中暴露出来了，花点时间仔细读一读，想一想大部分问题都会迎刃而解\n\n`坏问题3：无现象，自己的猜测`\n\n> Q:最近**系统有什么变动吗？\n> A:（这类问题一般都不乐意回答）\n\n-------------\n\n> Q:现在公司DNS服务不正常吗？\n> A:....\n\n点评：把现象描述清楚，一通瞎猜别人也不知道问题在哪\n\n## 如何提一个好问题\n\n### 预设观点\n\n- 高手喜欢帮助大家解决艰巨的任务\n- 高手不傲慢，只是对那些懒于动脑的人比较傲慢\n- 百分之九十的问题，想清楚如何提问之前，就找到了答案\n\n### 提问前\n\n#### 自己找答案\n\n- 内网资料库往往会有一些意外惊喜\n- 阅读相关项目的文档或错误指南（尤其是入门问题）\n- 百分之九十的问题，想清楚如何提问之前，就找到了答案\n\n#### 提问前注意要点\n\n- 提问之前明白自己做什么\n- 周全的准备你的问题\n- 打算为此问题做点什么\n- 别问自己应该解决的问题\n\n#### 怎样提问\n\n- 选择合适的提问方式\n- 用题贴切，语法正确\n- 使用描述准确，含义丰富的标题\n- 精确描述，信息量大\n\t- 精确有效的描述信息（比如日志和异常栈）\n\t- 只说症状，不说自己的猜想（带上一些错误的截图）\n\t- 按时间顺序列出症状\n\t- 最好加上一些非常规的北京信息\n\t- 明白自己想要问什么\n- 提问态度要好，明白别人是帮助你而不是服务你\n\n#### 提问后\n\n- 及时总结成文章之类的，方便后面的人查看\n\n### 思维导图\n最后附上一张提问的思维导图，方便大家查阅\n<img src='http://i1.piimg.com/4851/af33576d07d67166.png'>\n\n## 参考资料\n\n[提问的智慧(中文版)](http://www.jianshu.com/p/60dd8e9cd12f)","source":"_posts/efficientQuestion.md","raw":"title: 如何进行高效的提问\ndate: 2016-11-2 16:32:00\ncategories: scliuyang\ntags:\n- 提问\n- 高效的提问\n---\n高效提问是有效沟通的第一步，在工作中经常碰到因为低效提问或无效提问浪费大量的时间，增加沟通成本，本文希望能提高大家提问水平，给大家一点启发。\n\n<!--more-->\n\n## 好坏问题对比\n\n`坏问题1：在不在？`\n\n\n> 小明: 在不在？\t10:23\n> 小红: 在。\t11:01\n> 小明: 想请教你一个问题可以不？\t11:50\n> 小红: 可以，说吧。\t14:20\n> 小明: XX项目是你在维护么？ 15:00\n> 小红: 是的。 15:20\n> 小明: 巴拉巴拉开始说问题 15:30\n\n点评： 首先小明从上午10:23开始提问，一直到下午15:30才真正的描述问题，此前一直是在进行一些没有啥营养的话，浪费精力。\n\n`改进版`\n\n> 小明: 你好，请问你是XX项目的维护人么？我这里有XXX问题，无法找到解决方式，能提供下帮助么？ 10:23\n> 小红: 这个问题可以参照XXX文档即可解决 11:02\n\n\n`坏问题2：不看提示，张嘴就问`\n\n> 小明：帮忙看下XX项目发布失败\n> 小张：给下发布日志\n> 小明：XXXX\n> 小张：日志上说了XX版本有误，更换下就好了\n\n点评：一些问题其实已经在提示中暴露出来了，花点时间仔细读一读，想一想大部分问题都会迎刃而解\n\n`坏问题3：无现象，自己的猜测`\n\n> Q:最近**系统有什么变动吗？\n> A:（这类问题一般都不乐意回答）\n\n-------------\n\n> Q:现在公司DNS服务不正常吗？\n> A:....\n\n点评：把现象描述清楚，一通瞎猜别人也不知道问题在哪\n\n## 如何提一个好问题\n\n### 预设观点\n\n- 高手喜欢帮助大家解决艰巨的任务\n- 高手不傲慢，只是对那些懒于动脑的人比较傲慢\n- 百分之九十的问题，想清楚如何提问之前，就找到了答案\n\n### 提问前\n\n#### 自己找答案\n\n- 内网资料库往往会有一些意外惊喜\n- 阅读相关项目的文档或错误指南（尤其是入门问题）\n- 百分之九十的问题，想清楚如何提问之前，就找到了答案\n\n#### 提问前注意要点\n\n- 提问之前明白自己做什么\n- 周全的准备你的问题\n- 打算为此问题做点什么\n- 别问自己应该解决的问题\n\n#### 怎样提问\n\n- 选择合适的提问方式\n- 用题贴切，语法正确\n- 使用描述准确，含义丰富的标题\n- 精确描述，信息量大\n\t- 精确有效的描述信息（比如日志和异常栈）\n\t- 只说症状，不说自己的猜想（带上一些错误的截图）\n\t- 按时间顺序列出症状\n\t- 最好加上一些非常规的北京信息\n\t- 明白自己想要问什么\n- 提问态度要好，明白别人是帮助你而不是服务你\n\n#### 提问后\n\n- 及时总结成文章之类的，方便后面的人查看\n\n### 思维导图\n最后附上一张提问的思维导图，方便大家查阅\n<img src='http://i1.piimg.com/4851/af33576d07d67166.png'>\n\n## 参考资料\n\n[提问的智慧(中文版)](http://www.jianshu.com/p/60dd8e9cd12f)","slug":"efficientQuestion","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq1a0008jc5bk8gjxymj","content":"<p>高效提问是有效沟通的第一步，在工作中经常碰到因为低效提问或无效提问浪费大量的时间，增加沟通成本，本文希望能提高大家提问水平，给大家一点启发。</p>\n<a id=\"more\"></a>\n<h2 id=\"好坏问题对比\"><a href=\"#好坏问题对比\" class=\"headerlink\" title=\"好坏问题对比\"></a>好坏问题对比</h2><p><code>坏问题1：在不在？</code></p>\n<blockquote>\n<p>小明: 在不在？    10:23<br>小红: 在。    11:01<br>小明: 想请教你一个问题可以不？    11:50<br>小红: 可以，说吧。    14:20<br>小明: XX项目是你在维护么？ 15:00<br>小红: 是的。 15:20<br>小明: 巴拉巴拉开始说问题 15:30</p>\n</blockquote>\n<p>点评： 首先小明从上午10:23开始提问，一直到下午15:30才真正的描述问题，此前一直是在进行一些没有啥营养的话，浪费精力。</p>\n<p><code>改进版</code></p>\n<blockquote>\n<p>小明: 你好，请问你是XX项目的维护人么？我这里有XXX问题，无法找到解决方式，能提供下帮助么？ 10:23<br>小红: 这个问题可以参照XXX文档即可解决 11:02</p>\n</blockquote>\n<p><code>坏问题2：不看提示，张嘴就问</code></p>\n<blockquote>\n<p>小明：帮忙看下XX项目发布失败<br>小张：给下发布日志<br>小明：XXXX<br>小张：日志上说了XX版本有误，更换下就好了</p>\n</blockquote>\n<p>点评：一些问题其实已经在提示中暴露出来了，花点时间仔细读一读，想一想大部分问题都会迎刃而解</p>\n<p><code>坏问题3：无现象，自己的猜测</code></p>\n<blockquote>\n<p>Q:最近**系统有什么变动吗？<br>A:（这类问题一般都不乐意回答）</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Q:现在公司DNS服务不正常吗？<br>A:….</p>\n</blockquote>\n<p>点评：把现象描述清楚，一通瞎猜别人也不知道问题在哪</p>\n<h2 id=\"如何提一个好问题\"><a href=\"#如何提一个好问题\" class=\"headerlink\" title=\"如何提一个好问题\"></a>如何提一个好问题</h2><h3 id=\"预设观点\"><a href=\"#预设观点\" class=\"headerlink\" title=\"预设观点\"></a>预设观点</h3><ul>\n<li>高手喜欢帮助大家解决艰巨的任务</li>\n<li>高手不傲慢，只是对那些懒于动脑的人比较傲慢</li>\n<li>百分之九十的问题，想清楚如何提问之前，就找到了答案</li>\n</ul>\n<h3 id=\"提问前\"><a href=\"#提问前\" class=\"headerlink\" title=\"提问前\"></a>提问前</h3><h4 id=\"自己找答案\"><a href=\"#自己找答案\" class=\"headerlink\" title=\"自己找答案\"></a>自己找答案</h4><ul>\n<li>内网资料库往往会有一些意外惊喜</li>\n<li>阅读相关项目的文档或错误指南（尤其是入门问题）</li>\n<li>百分之九十的问题，想清楚如何提问之前，就找到了答案</li>\n</ul>\n<h4 id=\"提问前注意要点\"><a href=\"#提问前注意要点\" class=\"headerlink\" title=\"提问前注意要点\"></a>提问前注意要点</h4><ul>\n<li>提问之前明白自己做什么</li>\n<li>周全的准备你的问题</li>\n<li>打算为此问题做点什么</li>\n<li>别问自己应该解决的问题</li>\n</ul>\n<h4 id=\"怎样提问\"><a href=\"#怎样提问\" class=\"headerlink\" title=\"怎样提问\"></a>怎样提问</h4><ul>\n<li>选择合适的提问方式</li>\n<li>用题贴切，语法正确</li>\n<li>使用描述准确，含义丰富的标题</li>\n<li>精确描述，信息量大<ul>\n<li>精确有效的描述信息（比如日志和异常栈）</li>\n<li>只说症状，不说自己的猜想（带上一些错误的截图）</li>\n<li>按时间顺序列出症状</li>\n<li>最好加上一些非常规的北京信息</li>\n<li>明白自己想要问什么</li>\n</ul>\n</li>\n<li>提问态度要好，明白别人是帮助你而不是服务你</li>\n</ul>\n<h4 id=\"提问后\"><a href=\"#提问后\" class=\"headerlink\" title=\"提问后\"></a>提问后</h4><ul>\n<li>及时总结成文章之类的，方便后面的人查看</li>\n</ul>\n<h3 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p>最后附上一张提问的思维导图，方便大家查阅<br><img src=\"http://i1.piimg.com/4851/af33576d07d67166.png\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.jianshu.com/p/60dd8e9cd12f\" target=\"_blank\" rel=\"noopener\">提问的智慧(中文版)</a></p>\n","site":{"data":{}},"excerpt":"<p>高效提问是有效沟通的第一步，在工作中经常碰到因为低效提问或无效提问浪费大量的时间，增加沟通成本，本文希望能提高大家提问水平，给大家一点启发。</p>","more":"<h2 id=\"好坏问题对比\"><a href=\"#好坏问题对比\" class=\"headerlink\" title=\"好坏问题对比\"></a>好坏问题对比</h2><p><code>坏问题1：在不在？</code></p>\n<blockquote>\n<p>小明: 在不在？    10:23<br>小红: 在。    11:01<br>小明: 想请教你一个问题可以不？    11:50<br>小红: 可以，说吧。    14:20<br>小明: XX项目是你在维护么？ 15:00<br>小红: 是的。 15:20<br>小明: 巴拉巴拉开始说问题 15:30</p>\n</blockquote>\n<p>点评： 首先小明从上午10:23开始提问，一直到下午15:30才真正的描述问题，此前一直是在进行一些没有啥营养的话，浪费精力。</p>\n<p><code>改进版</code></p>\n<blockquote>\n<p>小明: 你好，请问你是XX项目的维护人么？我这里有XXX问题，无法找到解决方式，能提供下帮助么？ 10:23<br>小红: 这个问题可以参照XXX文档即可解决 11:02</p>\n</blockquote>\n<p><code>坏问题2：不看提示，张嘴就问</code></p>\n<blockquote>\n<p>小明：帮忙看下XX项目发布失败<br>小张：给下发布日志<br>小明：XXXX<br>小张：日志上说了XX版本有误，更换下就好了</p>\n</blockquote>\n<p>点评：一些问题其实已经在提示中暴露出来了，花点时间仔细读一读，想一想大部分问题都会迎刃而解</p>\n<p><code>坏问题3：无现象，自己的猜测</code></p>\n<blockquote>\n<p>Q:最近**系统有什么变动吗？<br>A:（这类问题一般都不乐意回答）</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>Q:现在公司DNS服务不正常吗？<br>A:….</p>\n</blockquote>\n<p>点评：把现象描述清楚，一通瞎猜别人也不知道问题在哪</p>\n<h2 id=\"如何提一个好问题\"><a href=\"#如何提一个好问题\" class=\"headerlink\" title=\"如何提一个好问题\"></a>如何提一个好问题</h2><h3 id=\"预设观点\"><a href=\"#预设观点\" class=\"headerlink\" title=\"预设观点\"></a>预设观点</h3><ul>\n<li>高手喜欢帮助大家解决艰巨的任务</li>\n<li>高手不傲慢，只是对那些懒于动脑的人比较傲慢</li>\n<li>百分之九十的问题，想清楚如何提问之前，就找到了答案</li>\n</ul>\n<h3 id=\"提问前\"><a href=\"#提问前\" class=\"headerlink\" title=\"提问前\"></a>提问前</h3><h4 id=\"自己找答案\"><a href=\"#自己找答案\" class=\"headerlink\" title=\"自己找答案\"></a>自己找答案</h4><ul>\n<li>内网资料库往往会有一些意外惊喜</li>\n<li>阅读相关项目的文档或错误指南（尤其是入门问题）</li>\n<li>百分之九十的问题，想清楚如何提问之前，就找到了答案</li>\n</ul>\n<h4 id=\"提问前注意要点\"><a href=\"#提问前注意要点\" class=\"headerlink\" title=\"提问前注意要点\"></a>提问前注意要点</h4><ul>\n<li>提问之前明白自己做什么</li>\n<li>周全的准备你的问题</li>\n<li>打算为此问题做点什么</li>\n<li>别问自己应该解决的问题</li>\n</ul>\n<h4 id=\"怎样提问\"><a href=\"#怎样提问\" class=\"headerlink\" title=\"怎样提问\"></a>怎样提问</h4><ul>\n<li>选择合适的提问方式</li>\n<li>用题贴切，语法正确</li>\n<li>使用描述准确，含义丰富的标题</li>\n<li>精确描述，信息量大<ul>\n<li>精确有效的描述信息（比如日志和异常栈）</li>\n<li>只说症状，不说自己的猜想（带上一些错误的截图）</li>\n<li>按时间顺序列出症状</li>\n<li>最好加上一些非常规的北京信息</li>\n<li>明白自己想要问什么</li>\n</ul>\n</li>\n<li>提问态度要好，明白别人是帮助你而不是服务你</li>\n</ul>\n<h4 id=\"提问后\"><a href=\"#提问后\" class=\"headerlink\" title=\"提问后\"></a>提问后</h4><ul>\n<li>及时总结成文章之类的，方便后面的人查看</li>\n</ul>\n<h3 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h3><p>最后附上一张提问的思维导图，方便大家查阅<br><img src=\"http://i1.piimg.com/4851/af33576d07d67166.png\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://www.jianshu.com/p/60dd8e9cd12f\" target=\"_blank\" rel=\"noopener\">提问的智慧(中文版)</a></p>"},{"title":"初识docker","date":"2016-12-21T08:32:00.000Z","_content":"docker经过这么几年的发展，到如今更是火热到即使你没吃过猪也见过猪跑的地步,本节会给大家介绍docker的一些含义，让大家了解docker\n\n<!--more-->\n\n# 什么是Docker\n\nDocker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。\n\n——摘自维基百科\n\n# Docker到底牛逼在哪里\n\ndocker的中文含义`码头工人`，这个翻译初看会觉得很怪异,其实官方取名这个名字有包含隐喻的意思在内.\n\n我们再看看docker的logo，一头像船的鲸鱼上面装载着许许多多的箱子，结合`码头工人`的意思，我们其实可以想到`集装箱`这个概念，`集装箱`是全球物流系统中一个非常重要的发明，他带来了物流的规范化，统一化，极大的节约了人力物理和时间成本。\n<img src=\"http://i1.piimg.com/4851/5356edebd8c82056.png\" style=\"width:200px;\"></img>\n\n## 集装箱的作用\n\n  我们可以想想在集装箱这个定义出来之前的货物运输：货物一箱箱的搬上货车送到附近的火车站，然后一箱箱卸下，再一箱箱的搬上火车运送到附近的码头...\n  上述的过程中不难发现大量的人力和时间成本都花费在一箱箱的搬运上面，在运输速度一定的情况下，装卸就成为了物流的瓶颈。\n  在`集装箱`出现后这个问题得到了极大的改善。集装箱重要在它提供了一种通用的封装货物的标准规格（尺寸，外形符合统一标准），这样就产生了一个巨大的优点：在物流运输中只需要在运输前一次封装，集装箱就可以放上火车，卡车，拉到码头，直接放在货船上；卸船之后直接再放上火车，卡车，运送到目的地。而且由于集装箱符合统一标准，整个流程非常容易机械化，这引发了以集装箱为中心的整个全球物流的标准化进程，从而节省了大量的时间资源和人力资源，成本迅速下降，促进了全球资源的流动与重新配置。\n\n## Docker与集装箱\n\ndocker就像码头的工人一样，把应用打包为一个个封装好的标准集装箱，就是大家口中经常镜像文件。那docker为业内带来了什么呢？\n\n### docker诞生以前，运维的蛮荒时代\n\n  以前我们搭建一个网站，你可能会装PHP,Mysql，Apache等等一堆软件，好花费大半天的时间这个网站能正常运行起来了。\n\n  一段时间后我们需要更高的PHP版本来搭建一个其他类型的网站，版本冲突了咋整？一番google后，费了九牛二虎之力两个网站终于能共同运行了。\n老板后来告诉你由于网站太火爆了我们需要换一台服务器迁移过去，于是你又不得不巴拉巴拉的折腾一番将所有的环境重新配置一遍。\n\n  老板小手一拍，我们要优化我们的服务，在全国各地都建立节点提供服务，你掰一掰的你手指头发现有数不清的环境需要搭建，你的内心是崩溃的。\n\n### docker出现后，我们步入了工业时代\n\n就和`集装箱`一样，docker为我们带来的是标准，具体一点说就是镜像。在docker当中镜像其实就是你把一大包工具打包成一个集装箱交于docker运行，镜像与镜像之间互不影响(集装箱与集装箱之间也是互不影响运输)。\n\n在docker中，镜像是无法直接运行的，我猜想这并不是技术上的原因，而是工程设计上的原因。因为一般来说，一个软件的某个具体版本只会打包成一个镜像。如果镜像可以配置，运行的话，在使用过程中很可能会对镜像造成破坏。\n\n那怎么样避免这个问题呢，就是再加一层，也就是相当于用了分身术，只要本尊没问题，分身怎么扑街都不会真正的跪掉。多加的这一层分身，就叫容器（container），这个名字也挺形象，它就像个盒子一样，你的应用在里面运行，而且多了一层安全机制。你想使用服务或把你的应用跑起来的话，只需要使用镜像新创建一个容器就可以了（也是一条命令搞定），而镜像还放在那里不动，没办法，金贵嘛。\n\n### docker究竟做了什么？\ndocker正是在部署过程中，将上面那些重复的部分，由docker自动化完成。只需要在第一次部署时，构建完可用的docker镜像。然后在以后使用的过程中，短短的几行命令，就可以直接拉取镜像，根据这个镜像创建出一个容器，把服务跑起来了。所需要的仅仅是安装了docker的服务器，一个Dockerfile文件，以及比较流畅的网络而已。真可谓`一次构建，到处部署`。\n- 需要nginx,直接pull nginx镜像完事\n- 迁移服务器？直接下载一个非常小的Dockerfile，安装一个docker环境即可，简单的不能在简单\n- 多个版本共存？新建一个镜像，爱用哪个版本用哪个，容器的隔离性让我们就是这么任性\n\n到这个地方，你可能已经发现了，docker镜像成为了一种像集装箱那样的标准货件。它不像传统的软件交付方式那样，只把代码以及说明文档之类的给你就完了，而是直接给你一个标准docker货件，它可能是Dockerfile，或者直接就是镜像，这个标准件不仅包括了代码本身，还包括了代码运行的OS等各种整体环境。\n\n于是，谁想用我的服务，直接拉取镜像，实例化一个容器就可以了，能直接提供你所要的服务，不再像之前那样有繁复的安装过程————这些都有人给你做过了。\n\n# 与传统虚拟机对比\n\n有人可能会说，这些不是虚拟机都做到了么，还要docker干嘛？\n\n传统虚拟机就像一个老爷爷，走路晃晃悠悠，还需要分配资源，给予照顾才行。反观docker则像是一个健步如飞的年轻小伙子，干啥事都是一个字`快`.\n\n- 容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n- 传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。\n- Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n下图是docker与传统虚拟机性能对比，图片来自 [Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/)\n<img src=\"http://p1.bqimg.com/4851/12e0188ee1b32356.png\"></img>\n\n# 下一节预告\n\n下一节会给大家来带一些docker常用的使用命令介绍","source":"_posts/docker.md","raw":"title: 初识docker\ndate: 2016-12-21 16:32:00\ncategories: scliuyang\ntags:\n- docker\n\n---\ndocker经过这么几年的发展，到如今更是火热到即使你没吃过猪也见过猪跑的地步,本节会给大家介绍docker的一些含义，让大家了解docker\n\n<!--more-->\n\n# 什么是Docker\n\nDocker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。\n\n——摘自维基百科\n\n# Docker到底牛逼在哪里\n\ndocker的中文含义`码头工人`，这个翻译初看会觉得很怪异,其实官方取名这个名字有包含隐喻的意思在内.\n\n我们再看看docker的logo，一头像船的鲸鱼上面装载着许许多多的箱子，结合`码头工人`的意思，我们其实可以想到`集装箱`这个概念，`集装箱`是全球物流系统中一个非常重要的发明，他带来了物流的规范化，统一化，极大的节约了人力物理和时间成本。\n<img src=\"http://i1.piimg.com/4851/5356edebd8c82056.png\" style=\"width:200px;\"></img>\n\n## 集装箱的作用\n\n  我们可以想想在集装箱这个定义出来之前的货物运输：货物一箱箱的搬上货车送到附近的火车站，然后一箱箱卸下，再一箱箱的搬上火车运送到附近的码头...\n  上述的过程中不难发现大量的人力和时间成本都花费在一箱箱的搬运上面，在运输速度一定的情况下，装卸就成为了物流的瓶颈。\n  在`集装箱`出现后这个问题得到了极大的改善。集装箱重要在它提供了一种通用的封装货物的标准规格（尺寸，外形符合统一标准），这样就产生了一个巨大的优点：在物流运输中只需要在运输前一次封装，集装箱就可以放上火车，卡车，拉到码头，直接放在货船上；卸船之后直接再放上火车，卡车，运送到目的地。而且由于集装箱符合统一标准，整个流程非常容易机械化，这引发了以集装箱为中心的整个全球物流的标准化进程，从而节省了大量的时间资源和人力资源，成本迅速下降，促进了全球资源的流动与重新配置。\n\n## Docker与集装箱\n\ndocker就像码头的工人一样，把应用打包为一个个封装好的标准集装箱，就是大家口中经常镜像文件。那docker为业内带来了什么呢？\n\n### docker诞生以前，运维的蛮荒时代\n\n  以前我们搭建一个网站，你可能会装PHP,Mysql，Apache等等一堆软件，好花费大半天的时间这个网站能正常运行起来了。\n\n  一段时间后我们需要更高的PHP版本来搭建一个其他类型的网站，版本冲突了咋整？一番google后，费了九牛二虎之力两个网站终于能共同运行了。\n老板后来告诉你由于网站太火爆了我们需要换一台服务器迁移过去，于是你又不得不巴拉巴拉的折腾一番将所有的环境重新配置一遍。\n\n  老板小手一拍，我们要优化我们的服务，在全国各地都建立节点提供服务，你掰一掰的你手指头发现有数不清的环境需要搭建，你的内心是崩溃的。\n\n### docker出现后，我们步入了工业时代\n\n就和`集装箱`一样，docker为我们带来的是标准，具体一点说就是镜像。在docker当中镜像其实就是你把一大包工具打包成一个集装箱交于docker运行，镜像与镜像之间互不影响(集装箱与集装箱之间也是互不影响运输)。\n\n在docker中，镜像是无法直接运行的，我猜想这并不是技术上的原因，而是工程设计上的原因。因为一般来说，一个软件的某个具体版本只会打包成一个镜像。如果镜像可以配置，运行的话，在使用过程中很可能会对镜像造成破坏。\n\n那怎么样避免这个问题呢，就是再加一层，也就是相当于用了分身术，只要本尊没问题，分身怎么扑街都不会真正的跪掉。多加的这一层分身，就叫容器（container），这个名字也挺形象，它就像个盒子一样，你的应用在里面运行，而且多了一层安全机制。你想使用服务或把你的应用跑起来的话，只需要使用镜像新创建一个容器就可以了（也是一条命令搞定），而镜像还放在那里不动，没办法，金贵嘛。\n\n### docker究竟做了什么？\ndocker正是在部署过程中，将上面那些重复的部分，由docker自动化完成。只需要在第一次部署时，构建完可用的docker镜像。然后在以后使用的过程中，短短的几行命令，就可以直接拉取镜像，根据这个镜像创建出一个容器，把服务跑起来了。所需要的仅仅是安装了docker的服务器，一个Dockerfile文件，以及比较流畅的网络而已。真可谓`一次构建，到处部署`。\n- 需要nginx,直接pull nginx镜像完事\n- 迁移服务器？直接下载一个非常小的Dockerfile，安装一个docker环境即可，简单的不能在简单\n- 多个版本共存？新建一个镜像，爱用哪个版本用哪个，容器的隔离性让我们就是这么任性\n\n到这个地方，你可能已经发现了，docker镜像成为了一种像集装箱那样的标准货件。它不像传统的软件交付方式那样，只把代码以及说明文档之类的给你就完了，而是直接给你一个标准docker货件，它可能是Dockerfile，或者直接就是镜像，这个标准件不仅包括了代码本身，还包括了代码运行的OS等各种整体环境。\n\n于是，谁想用我的服务，直接拉取镜像，实例化一个容器就可以了，能直接提供你所要的服务，不再像之前那样有繁复的安装过程————这些都有人给你做过了。\n\n# 与传统虚拟机对比\n\n有人可能会说，这些不是虚拟机都做到了么，还要docker干嘛？\n\n传统虚拟机就像一个老爷爷，走路晃晃悠悠，还需要分配资源，给予照顾才行。反观docker则像是一个健步如飞的年轻小伙子，干啥事都是一个字`快`.\n\n- 容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。\n- 传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。\n- Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。\n\n下图是docker与传统虚拟机性能对比，图片来自 [Docker — 从入门到实践](https://yeasy.gitbooks.io/docker_practice/content/)\n<img src=\"http://p1.bqimg.com/4851/12e0188ee1b32356.png\"></img>\n\n# 下一节预告\n\n下一节会给大家来带一些docker常用的使用命令介绍","slug":"docker","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq1e000bjc5bi4x1e6rh","content":"<p>docker经过这么几年的发展，到如今更是火热到即使你没吃过猪也见过猪跑的地步,本节会给大家介绍docker的一些含义，让大家了解docker</p>\n<a id=\"more\"></a>\n<h1 id=\"什么是Docker\"><a href=\"#什么是Docker\" class=\"headerlink\" title=\"什么是Docker\"></a>什么是Docker</h1><p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。</p>\n<p>——摘自维基百科</p>\n<h1 id=\"Docker到底牛逼在哪里\"><a href=\"#Docker到底牛逼在哪里\" class=\"headerlink\" title=\"Docker到底牛逼在哪里\"></a>Docker到底牛逼在哪里</h1><p>docker的中文含义<code>码头工人</code>，这个翻译初看会觉得很怪异,其实官方取名这个名字有包含隐喻的意思在内.</p>\n<p>我们再看看docker的logo，一头像船的鲸鱼上面装载着许许多多的箱子，结合<code>码头工人</code>的意思，我们其实可以想到<code>集装箱</code>这个概念，<code>集装箱</code>是全球物流系统中一个非常重要的发明，他带来了物流的规范化，统一化，极大的节约了人力物理和时间成本。<br><img src=\"http://i1.piimg.com/4851/5356edebd8c82056.png\" style=\"width:200px;\"></p>\n<h2 id=\"集装箱的作用\"><a href=\"#集装箱的作用\" class=\"headerlink\" title=\"集装箱的作用\"></a>集装箱的作用</h2><p>  我们可以想想在集装箱这个定义出来之前的货物运输：货物一箱箱的搬上货车送到附近的火车站，然后一箱箱卸下，再一箱箱的搬上火车运送到附近的码头…<br>  上述的过程中不难发现大量的人力和时间成本都花费在一箱箱的搬运上面，在运输速度一定的情况下，装卸就成为了物流的瓶颈。<br>  在<code>集装箱</code>出现后这个问题得到了极大的改善。集装箱重要在它提供了一种通用的封装货物的标准规格（尺寸，外形符合统一标准），这样就产生了一个巨大的优点：在物流运输中只需要在运输前一次封装，集装箱就可以放上火车，卡车，拉到码头，直接放在货船上；卸船之后直接再放上火车，卡车，运送到目的地。而且由于集装箱符合统一标准，整个流程非常容易机械化，这引发了以集装箱为中心的整个全球物流的标准化进程，从而节省了大量的时间资源和人力资源，成本迅速下降，促进了全球资源的流动与重新配置。</p>\n<h2 id=\"Docker与集装箱\"><a href=\"#Docker与集装箱\" class=\"headerlink\" title=\"Docker与集装箱\"></a>Docker与集装箱</h2><p>docker就像码头的工人一样，把应用打包为一个个封装好的标准集装箱，就是大家口中经常镜像文件。那docker为业内带来了什么呢？</p>\n<h3 id=\"docker诞生以前，运维的蛮荒时代\"><a href=\"#docker诞生以前，运维的蛮荒时代\" class=\"headerlink\" title=\"docker诞生以前，运维的蛮荒时代\"></a>docker诞生以前，运维的蛮荒时代</h3><p>  以前我们搭建一个网站，你可能会装PHP,Mysql，Apache等等一堆软件，好花费大半天的时间这个网站能正常运行起来了。</p>\n<p>  一段时间后我们需要更高的PHP版本来搭建一个其他类型的网站，版本冲突了咋整？一番google后，费了九牛二虎之力两个网站终于能共同运行了。<br>老板后来告诉你由于网站太火爆了我们需要换一台服务器迁移过去，于是你又不得不巴拉巴拉的折腾一番将所有的环境重新配置一遍。</p>\n<p>  老板小手一拍，我们要优化我们的服务，在全国各地都建立节点提供服务，你掰一掰的你手指头发现有数不清的环境需要搭建，你的内心是崩溃的。</p>\n<h3 id=\"docker出现后，我们步入了工业时代\"><a href=\"#docker出现后，我们步入了工业时代\" class=\"headerlink\" title=\"docker出现后，我们步入了工业时代\"></a>docker出现后，我们步入了工业时代</h3><p>就和<code>集装箱</code>一样，docker为我们带来的是标准，具体一点说就是镜像。在docker当中镜像其实就是你把一大包工具打包成一个集装箱交于docker运行，镜像与镜像之间互不影响(集装箱与集装箱之间也是互不影响运输)。</p>\n<p>在docker中，镜像是无法直接运行的，我猜想这并不是技术上的原因，而是工程设计上的原因。因为一般来说，一个软件的某个具体版本只会打包成一个镜像。如果镜像可以配置，运行的话，在使用过程中很可能会对镜像造成破坏。</p>\n<p>那怎么样避免这个问题呢，就是再加一层，也就是相当于用了分身术，只要本尊没问题，分身怎么扑街都不会真正的跪掉。多加的这一层分身，就叫容器（container），这个名字也挺形象，它就像个盒子一样，你的应用在里面运行，而且多了一层安全机制。你想使用服务或把你的应用跑起来的话，只需要使用镜像新创建一个容器就可以了（也是一条命令搞定），而镜像还放在那里不动，没办法，金贵嘛。</p>\n<h3 id=\"docker究竟做了什么？\"><a href=\"#docker究竟做了什么？\" class=\"headerlink\" title=\"docker究竟做了什么？\"></a>docker究竟做了什么？</h3><p>docker正是在部署过程中，将上面那些重复的部分，由docker自动化完成。只需要在第一次部署时，构建完可用的docker镜像。然后在以后使用的过程中，短短的几行命令，就可以直接拉取镜像，根据这个镜像创建出一个容器，把服务跑起来了。所需要的仅仅是安装了docker的服务器，一个Dockerfile文件，以及比较流畅的网络而已。真可谓<code>一次构建，到处部署</code>。</p>\n<ul>\n<li>需要nginx,直接pull nginx镜像完事</li>\n<li>迁移服务器？直接下载一个非常小的Dockerfile，安装一个docker环境即可，简单的不能在简单</li>\n<li>多个版本共存？新建一个镜像，爱用哪个版本用哪个，容器的隔离性让我们就是这么任性</li>\n</ul>\n<p>到这个地方，你可能已经发现了，docker镜像成为了一种像集装箱那样的标准货件。它不像传统的软件交付方式那样，只把代码以及说明文档之类的给你就完了，而是直接给你一个标准docker货件，它可能是Dockerfile，或者直接就是镜像，这个标准件不仅包括了代码本身，还包括了代码运行的OS等各种整体环境。</p>\n<p>于是，谁想用我的服务，直接拉取镜像，实例化一个容器就可以了，能直接提供你所要的服务，不再像之前那样有繁复的安装过程————这些都有人给你做过了。</p>\n<h1 id=\"与传统虚拟机对比\"><a href=\"#与传统虚拟机对比\" class=\"headerlink\" title=\"与传统虚拟机对比\"></a>与传统虚拟机对比</h1><p>有人可能会说，这些不是虚拟机都做到了么，还要docker干嘛？</p>\n<p>传统虚拟机就像一个老爷爷，走路晃晃悠悠，还需要分配资源，给予照顾才行。反观docker则像是一个健步如飞的年轻小伙子，干啥事都是一个字<code>快</code>.</p>\n<ul>\n<li>容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</li>\n<li>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</li>\n<li>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</li>\n</ul>\n<p>下图是docker与传统虚拟机性能对比，图片来自 <a href=\"https://yeasy.gitbooks.io/docker_practice/content/\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a><br><img src=\"http://p1.bqimg.com/4851/12e0188ee1b32356.png\"></p>\n<h1 id=\"下一节预告\"><a href=\"#下一节预告\" class=\"headerlink\" title=\"下一节预告\"></a>下一节预告</h1><p>下一节会给大家来带一些docker常用的使用命令介绍</p>\n","site":{"data":{}},"excerpt":"<p>docker经过这么几年的发展，到如今更是火热到即使你没吃过猪也见过猪跑的地步,本节会给大家介绍docker的一些含义，让大家了解docker</p>","more":"<h1 id=\"什么是Docker\"><a href=\"#什么是Docker\" class=\"headerlink\" title=\"什么是Docker\"></a>什么是Docker</h1><p>Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。</p>\n<p>——摘自维基百科</p>\n<h1 id=\"Docker到底牛逼在哪里\"><a href=\"#Docker到底牛逼在哪里\" class=\"headerlink\" title=\"Docker到底牛逼在哪里\"></a>Docker到底牛逼在哪里</h1><p>docker的中文含义<code>码头工人</code>，这个翻译初看会觉得很怪异,其实官方取名这个名字有包含隐喻的意思在内.</p>\n<p>我们再看看docker的logo，一头像船的鲸鱼上面装载着许许多多的箱子，结合<code>码头工人</code>的意思，我们其实可以想到<code>集装箱</code>这个概念，<code>集装箱</code>是全球物流系统中一个非常重要的发明，他带来了物流的规范化，统一化，极大的节约了人力物理和时间成本。<br><img src=\"http://i1.piimg.com/4851/5356edebd8c82056.png\" style=\"width:200px;\"></p>\n<h2 id=\"集装箱的作用\"><a href=\"#集装箱的作用\" class=\"headerlink\" title=\"集装箱的作用\"></a>集装箱的作用</h2><p>  我们可以想想在集装箱这个定义出来之前的货物运输：货物一箱箱的搬上货车送到附近的火车站，然后一箱箱卸下，再一箱箱的搬上火车运送到附近的码头…<br>  上述的过程中不难发现大量的人力和时间成本都花费在一箱箱的搬运上面，在运输速度一定的情况下，装卸就成为了物流的瓶颈。<br>  在<code>集装箱</code>出现后这个问题得到了极大的改善。集装箱重要在它提供了一种通用的封装货物的标准规格（尺寸，外形符合统一标准），这样就产生了一个巨大的优点：在物流运输中只需要在运输前一次封装，集装箱就可以放上火车，卡车，拉到码头，直接放在货船上；卸船之后直接再放上火车，卡车，运送到目的地。而且由于集装箱符合统一标准，整个流程非常容易机械化，这引发了以集装箱为中心的整个全球物流的标准化进程，从而节省了大量的时间资源和人力资源，成本迅速下降，促进了全球资源的流动与重新配置。</p>\n<h2 id=\"Docker与集装箱\"><a href=\"#Docker与集装箱\" class=\"headerlink\" title=\"Docker与集装箱\"></a>Docker与集装箱</h2><p>docker就像码头的工人一样，把应用打包为一个个封装好的标准集装箱，就是大家口中经常镜像文件。那docker为业内带来了什么呢？</p>\n<h3 id=\"docker诞生以前，运维的蛮荒时代\"><a href=\"#docker诞生以前，运维的蛮荒时代\" class=\"headerlink\" title=\"docker诞生以前，运维的蛮荒时代\"></a>docker诞生以前，运维的蛮荒时代</h3><p>  以前我们搭建一个网站，你可能会装PHP,Mysql，Apache等等一堆软件，好花费大半天的时间这个网站能正常运行起来了。</p>\n<p>  一段时间后我们需要更高的PHP版本来搭建一个其他类型的网站，版本冲突了咋整？一番google后，费了九牛二虎之力两个网站终于能共同运行了。<br>老板后来告诉你由于网站太火爆了我们需要换一台服务器迁移过去，于是你又不得不巴拉巴拉的折腾一番将所有的环境重新配置一遍。</p>\n<p>  老板小手一拍，我们要优化我们的服务，在全国各地都建立节点提供服务，你掰一掰的你手指头发现有数不清的环境需要搭建，你的内心是崩溃的。</p>\n<h3 id=\"docker出现后，我们步入了工业时代\"><a href=\"#docker出现后，我们步入了工业时代\" class=\"headerlink\" title=\"docker出现后，我们步入了工业时代\"></a>docker出现后，我们步入了工业时代</h3><p>就和<code>集装箱</code>一样，docker为我们带来的是标准，具体一点说就是镜像。在docker当中镜像其实就是你把一大包工具打包成一个集装箱交于docker运行，镜像与镜像之间互不影响(集装箱与集装箱之间也是互不影响运输)。</p>\n<p>在docker中，镜像是无法直接运行的，我猜想这并不是技术上的原因，而是工程设计上的原因。因为一般来说，一个软件的某个具体版本只会打包成一个镜像。如果镜像可以配置，运行的话，在使用过程中很可能会对镜像造成破坏。</p>\n<p>那怎么样避免这个问题呢，就是再加一层，也就是相当于用了分身术，只要本尊没问题，分身怎么扑街都不会真正的跪掉。多加的这一层分身，就叫容器（container），这个名字也挺形象，它就像个盒子一样，你的应用在里面运行，而且多了一层安全机制。你想使用服务或把你的应用跑起来的话，只需要使用镜像新创建一个容器就可以了（也是一条命令搞定），而镜像还放在那里不动，没办法，金贵嘛。</p>\n<h3 id=\"docker究竟做了什么？\"><a href=\"#docker究竟做了什么？\" class=\"headerlink\" title=\"docker究竟做了什么？\"></a>docker究竟做了什么？</h3><p>docker正是在部署过程中，将上面那些重复的部分，由docker自动化完成。只需要在第一次部署时，构建完可用的docker镜像。然后在以后使用的过程中，短短的几行命令，就可以直接拉取镜像，根据这个镜像创建出一个容器，把服务跑起来了。所需要的仅仅是安装了docker的服务器，一个Dockerfile文件，以及比较流畅的网络而已。真可谓<code>一次构建，到处部署</code>。</p>\n<ul>\n<li>需要nginx,直接pull nginx镜像完事</li>\n<li>迁移服务器？直接下载一个非常小的Dockerfile，安装一个docker环境即可，简单的不能在简单</li>\n<li>多个版本共存？新建一个镜像，爱用哪个版本用哪个，容器的隔离性让我们就是这么任性</li>\n</ul>\n<p>到这个地方，你可能已经发现了，docker镜像成为了一种像集装箱那样的标准货件。它不像传统的软件交付方式那样，只把代码以及说明文档之类的给你就完了，而是直接给你一个标准docker货件，它可能是Dockerfile，或者直接就是镜像，这个标准件不仅包括了代码本身，还包括了代码运行的OS等各种整体环境。</p>\n<p>于是，谁想用我的服务，直接拉取镜像，实例化一个容器就可以了，能直接提供你所要的服务，不再像之前那样有繁复的安装过程————这些都有人给你做过了。</p>\n<h1 id=\"与传统虚拟机对比\"><a href=\"#与传统虚拟机对比\" class=\"headerlink\" title=\"与传统虚拟机对比\"></a>与传统虚拟机对比</h1><p>有人可能会说，这些不是虚拟机都做到了么，还要docker干嘛？</p>\n<p>传统虚拟机就像一个老爷爷，走路晃晃悠悠，还需要分配资源，给予照顾才行。反观docker则像是一个健步如飞的年轻小伙子，干啥事都是一个字<code>快</code>.</p>\n<ul>\n<li>容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，Docker 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</li>\n<li>传统的虚拟机技术启动应用服务往往需要数分钟，而 Docker 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</li>\n<li>Docker 使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，Docker 团队同各个开源项目团队一起维护了一大批高质量的官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</li>\n</ul>\n<p>下图是docker与传统虚拟机性能对比，图片来自 <a href=\"https://yeasy.gitbooks.io/docker_practice/content/\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a><br><img src=\"http://p1.bqimg.com/4851/12e0188ee1b32356.png\"></p>\n<h1 id=\"下一节预告\"><a href=\"#下一节预告\" class=\"headerlink\" title=\"下一节预告\"></a>下一节预告</h1><p>下一节会给大家来带一些docker常用的使用命令介绍</p>"},{"title":"js新的包管理工具yarn","date":"2016-11-30T08:32:00.000Z","_content":"2016年10月11日，facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具)，本文将介绍yarn工具带来的优点和使用入门。\n\n<!--more-->\n本文会介绍yarn的以下几个方面：\n1. yarn对比npm解决了什么问题，带来哪些便利。\n2. 获取yarn的正确姿势\n3. yarn的使用入门（介绍一些常用的命令\n4. 个人使用心得\n\n# yarn对比npm的优点\n根据[官方文档](https://github.com/yarnpkg/yarn)yarn具有6大优点\n\n## 离线模式\nyarn会有一个缓存目录，会缓存以前安装过的软件包，再次安装时就不必从网络下载了，大大加速安装速度。\n\n这一点很重要，npm 饱受诟病的一点就是，每次安装依赖，都需要从网络下载一大堆东西，而且是全部重新下载，工程多的时候比较烦人。\n\n我司部署node项目，是需要在发布机上install所有的依赖而且发布机的网络环境不是很好(不给搭梯子)，导致安装慢不说还经常失败(部分包需要联网编译)。更换yarn后只需将yarn的cache目录缓存起来，每次install嗷嗷的快，麻麻再也不用担心发布失败了。\n\n## 依赖关系确定性\n\n在每一台机器上针对同一个工程安装依赖时，生成的依赖关系顺序和版本是一致的。\n\n之前 npm 在这里有一个处理得不好的地方 。举例来说，我写的工程依赖 A, B, C 三个库，我在编写 package.json 的时候，给 A, B, C 都指定了版本号。但是 A 库可能又依赖 D, E, F 库，D 库又依赖 G, H 库。这么多关联依赖关系中，很可能某个库在指定依赖时，没有指定版本号。\n\n于是，这就导致了一个问题。如果我在另一台机器上对同样的工程安装依赖，或者把这台机器工程下的 node_modules 目录删除来重新安装依赖。由于关联依赖中，没有指定版本号的库，发生了版本更新，就会导致再次安装的依赖，其中具体某些软件包的版本是不一致的。在这种情况下，你会发现原来能够正常运行的程序，忽然变得不能工作或一堆 BUG.\n\nnpm对包引入顺序也十分的敏感，比如在一个空项目里执行以下命令\n\n```\nnpm init -y\nnpm install globule@0.1.0 -S\nnpm install babel-generator@6.19.0 -S\nnpm install babel-helper-define-map@6.18.0 -S\n```\n我们这里安装了3个包都依赖于lodash，不过globule依赖lodash@1.0.3,另外两个依赖lodash@4.x。现在目录依赖结构如下\n<img src=\"http://p1.bpimg.com/567571/d6e758cf0daca760.png\" style=\"width:500px\">\n\n这时假设我们在项目里使用lodash，但是忘记重新安装lodash\n```\nvar lodash = require('lodash');\nconsole.log(lodash.VERSION); // v1.0.3\n```\n另一个同事获取项目代码，执行`npm install`,这时的目录依赖结构为\n<img src=\"http://p1.bpimg.com/567571/4e045ea553b1e6d1.png\" style=\"width:500px\">\n可以看到第一层依赖的lodash变成了4.x版本，这样就造成了依赖版本不一致的问题。而yarn则会保证无论怎样引入的顺序，目录依赖结构都是一致的，确保不会发生这样的BUG。\n\n## 网络性能优化\n下载软件时会优化请求顺序，避免`请求瀑布`发生\n\n## 网络回弹\nyarn在某个安装包请求失败时不会导致安装失败，它会自动去尝试重新安装。而npm则会毫不犹豫的失败，导致得再来一次，耗费时间\n\n## 多注册来源\n所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。\n\n## 扁平模式\n\n对于多个包依赖同一个子包的情况，yarn会尽量提取为同一个包，防止出现多处副本，浪费空间。比如1.2中，yarn会为babel-generator和babel-helper-define-map 创建同一个lodash子依赖，这样就节约一份的空间。\n\n## 更多的emojis\n表情包大战o(╯□╰)o\n<img src=\"http://i1.piimg.com/567571/9821a5982fd73104.jpg\" style=\"width:500px\">\n\n# 正确的安装姿势\n\n注意yarn依赖node运行环境，官网提供了不同环境下的N种安装方法，[点我查看](https://yarnpkg.com/en/docs/install#alternatives-tab)。其中最重要的也是最通用的当然是`npm install yarn -g`，也不知道官网搞那么多幺蛾子的安装方式干嘛又是brew又是yum，还折腾半天。\n\n# yarn常用命令介绍\n\n## 创建项目\n命令`yarn init`，[详细介绍](https://yarnpkg.com/en/docs/cli/init)\n\n跟npm一样，会出现一个交互式的窗口，问一些package相关的问题\n\n```\nquestion name (testdir): my-awesome-package\nquestion version (1.0.0):\nquestion description: The best package you will ever find.\nquestion entry point (index.js):\nquestion git repository: https://github.com/yarnpkg/example-yarn-package\nquestion author: Yarn Contributor\nquestion license (MIT):\nsuccess Saved package.json\n✨  Done in 87.70s.\n```\n当然可以加参数 `--yes/-y` 来自动回答所有的问题(yes),便捷的生成一个package.json\n\n## 管理依赖\n\n注意，以下的命令都会自动更新你的package.json和yarn.lock文件\n\n### 添加依赖\n命令`yarn add [package]@[version/tag]`,[详细介绍](https://yarnpkg.com/en/docs/cli/add)\n\n这会自动把包添加到package.json里的dependencies,也同时会更新yarn.lock\n\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n+     \"package-1\": \"^1.0.0\"\n    }\n  }\n```\n\n添加到不同的dependencies需要加如下参数\n1. `yarn add --dev/-D` 添加到devDependencies\n2. `yarn add --peer/-P` 添加到peerDependencies\n3. `yarn add --optional/-O` 添加到optionalDependencies\n\n### 更新依赖\n命令`yarn upgrade [package]@[version/tag]`,[详细介绍](https://yarnpkg.com/en/docs/cli/upgrade)\n更新某个依赖的版本，并自动更新package.json和yarn.lock文件\n\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n-     \"package-1\": \"^1.0.0\"\n+     \"package-1\": \"^2.0.0\"\n    }\n  }\n```\n\n### 删除依赖\n命令`yarn remove [package]`\n删除某个依赖，并自动更新package.json和yarn.lock文件\n\n## 安装依赖\n命令 `yarn install`,[详细介绍](https://yarnpkg.com/en/docs/cli/install)\n\n会从package.json里提取所有的依赖并安装，然后生成yarn.lock锁定所有的依赖版本，别人执行`yarn install`时会根据yarn.lock安装依赖，保证不同的电脑安装的依赖目录结构完全一致。\n\n可选参数\n1. `yarn install --flat` 有且仅有一个依赖的版本被允许，多依赖会出现一个交互式窗口，让使用者选择某一个版本安装\n2. `yarn install --force` 强制重新下载所有的依赖包\n3. `yarn install --production` 只下载dependencies下的依赖\n\n## 全局命令\n在yarn命令前加一个global修饰，可以将命令变为全局的，支持的命令有 add,bin,ls,remove,upgrade\n例如`npm install gulp -g`,可以用`yarn global add gulp`来替代\n\n# 个人使用心得\n1. 更换安装源，使用阿里提供的npm register加速， `yarn config set registry 'https://registry.npm.taobao.org'`,当然如果npm已经配置过，yarn就无需再配置了。\n2. yarn还有许多小问题，不过官方也在努力修复中，建议时不时使用`yarn self-update`来更新版本\n3. 以前包锁定是使用`npm shrinkwrap`命令，感觉繁琐且难维护，使用yarn后自动生成锁定文件，简单方便\n\n# 参考资料\n[新的 js 包管理工具 yarn 解决了什么问题？](https://zhuanlan.zhihu.com/p/22967139)\n[yarn cli doc](https://yarnpkg.com/en/docs/cli/)","source":"_posts/yarn.md","raw":"title: js新的包管理工具yarn\ndate: 2016-11-30 16:32:00\ncategories: scliuyang\ntags:\n- yarn\n\n---\n2016年10月11日，facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具)，本文将介绍yarn工具带来的优点和使用入门。\n\n<!--more-->\n本文会介绍yarn的以下几个方面：\n1. yarn对比npm解决了什么问题，带来哪些便利。\n2. 获取yarn的正确姿势\n3. yarn的使用入门（介绍一些常用的命令\n4. 个人使用心得\n\n# yarn对比npm的优点\n根据[官方文档](https://github.com/yarnpkg/yarn)yarn具有6大优点\n\n## 离线模式\nyarn会有一个缓存目录，会缓存以前安装过的软件包，再次安装时就不必从网络下载了，大大加速安装速度。\n\n这一点很重要，npm 饱受诟病的一点就是，每次安装依赖，都需要从网络下载一大堆东西，而且是全部重新下载，工程多的时候比较烦人。\n\n我司部署node项目，是需要在发布机上install所有的依赖而且发布机的网络环境不是很好(不给搭梯子)，导致安装慢不说还经常失败(部分包需要联网编译)。更换yarn后只需将yarn的cache目录缓存起来，每次install嗷嗷的快，麻麻再也不用担心发布失败了。\n\n## 依赖关系确定性\n\n在每一台机器上针对同一个工程安装依赖时，生成的依赖关系顺序和版本是一致的。\n\n之前 npm 在这里有一个处理得不好的地方 。举例来说，我写的工程依赖 A, B, C 三个库，我在编写 package.json 的时候，给 A, B, C 都指定了版本号。但是 A 库可能又依赖 D, E, F 库，D 库又依赖 G, H 库。这么多关联依赖关系中，很可能某个库在指定依赖时，没有指定版本号。\n\n于是，这就导致了一个问题。如果我在另一台机器上对同样的工程安装依赖，或者把这台机器工程下的 node_modules 目录删除来重新安装依赖。由于关联依赖中，没有指定版本号的库，发生了版本更新，就会导致再次安装的依赖，其中具体某些软件包的版本是不一致的。在这种情况下，你会发现原来能够正常运行的程序，忽然变得不能工作或一堆 BUG.\n\nnpm对包引入顺序也十分的敏感，比如在一个空项目里执行以下命令\n\n```\nnpm init -y\nnpm install globule@0.1.0 -S\nnpm install babel-generator@6.19.0 -S\nnpm install babel-helper-define-map@6.18.0 -S\n```\n我们这里安装了3个包都依赖于lodash，不过globule依赖lodash@1.0.3,另外两个依赖lodash@4.x。现在目录依赖结构如下\n<img src=\"http://p1.bpimg.com/567571/d6e758cf0daca760.png\" style=\"width:500px\">\n\n这时假设我们在项目里使用lodash，但是忘记重新安装lodash\n```\nvar lodash = require('lodash');\nconsole.log(lodash.VERSION); // v1.0.3\n```\n另一个同事获取项目代码，执行`npm install`,这时的目录依赖结构为\n<img src=\"http://p1.bpimg.com/567571/4e045ea553b1e6d1.png\" style=\"width:500px\">\n可以看到第一层依赖的lodash变成了4.x版本，这样就造成了依赖版本不一致的问题。而yarn则会保证无论怎样引入的顺序，目录依赖结构都是一致的，确保不会发生这样的BUG。\n\n## 网络性能优化\n下载软件时会优化请求顺序，避免`请求瀑布`发生\n\n## 网络回弹\nyarn在某个安装包请求失败时不会导致安装失败，它会自动去尝试重新安装。而npm则会毫不犹豫的失败，导致得再来一次，耗费时间\n\n## 多注册来源\n所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。\n\n## 扁平模式\n\n对于多个包依赖同一个子包的情况，yarn会尽量提取为同一个包，防止出现多处副本，浪费空间。比如1.2中，yarn会为babel-generator和babel-helper-define-map 创建同一个lodash子依赖，这样就节约一份的空间。\n\n## 更多的emojis\n表情包大战o(╯□╰)o\n<img src=\"http://i1.piimg.com/567571/9821a5982fd73104.jpg\" style=\"width:500px\">\n\n# 正确的安装姿势\n\n注意yarn依赖node运行环境，官网提供了不同环境下的N种安装方法，[点我查看](https://yarnpkg.com/en/docs/install#alternatives-tab)。其中最重要的也是最通用的当然是`npm install yarn -g`，也不知道官网搞那么多幺蛾子的安装方式干嘛又是brew又是yum，还折腾半天。\n\n# yarn常用命令介绍\n\n## 创建项目\n命令`yarn init`，[详细介绍](https://yarnpkg.com/en/docs/cli/init)\n\n跟npm一样，会出现一个交互式的窗口，问一些package相关的问题\n\n```\nquestion name (testdir): my-awesome-package\nquestion version (1.0.0):\nquestion description: The best package you will ever find.\nquestion entry point (index.js):\nquestion git repository: https://github.com/yarnpkg/example-yarn-package\nquestion author: Yarn Contributor\nquestion license (MIT):\nsuccess Saved package.json\n✨  Done in 87.70s.\n```\n当然可以加参数 `--yes/-y` 来自动回答所有的问题(yes),便捷的生成一个package.json\n\n## 管理依赖\n\n注意，以下的命令都会自动更新你的package.json和yarn.lock文件\n\n### 添加依赖\n命令`yarn add [package]@[version/tag]`,[详细介绍](https://yarnpkg.com/en/docs/cli/add)\n\n这会自动把包添加到package.json里的dependencies,也同时会更新yarn.lock\n\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n+     \"package-1\": \"^1.0.0\"\n    }\n  }\n```\n\n添加到不同的dependencies需要加如下参数\n1. `yarn add --dev/-D` 添加到devDependencies\n2. `yarn add --peer/-P` 添加到peerDependencies\n3. `yarn add --optional/-O` 添加到optionalDependencies\n\n### 更新依赖\n命令`yarn upgrade [package]@[version/tag]`,[详细介绍](https://yarnpkg.com/en/docs/cli/upgrade)\n更新某个依赖的版本，并自动更新package.json和yarn.lock文件\n\n```\n  {\n    \"name\": \"my-package\",\n    \"dependencies\": {\n-     \"package-1\": \"^1.0.0\"\n+     \"package-1\": \"^2.0.0\"\n    }\n  }\n```\n\n### 删除依赖\n命令`yarn remove [package]`\n删除某个依赖，并自动更新package.json和yarn.lock文件\n\n## 安装依赖\n命令 `yarn install`,[详细介绍](https://yarnpkg.com/en/docs/cli/install)\n\n会从package.json里提取所有的依赖并安装，然后生成yarn.lock锁定所有的依赖版本，别人执行`yarn install`时会根据yarn.lock安装依赖，保证不同的电脑安装的依赖目录结构完全一致。\n\n可选参数\n1. `yarn install --flat` 有且仅有一个依赖的版本被允许，多依赖会出现一个交互式窗口，让使用者选择某一个版本安装\n2. `yarn install --force` 强制重新下载所有的依赖包\n3. `yarn install --production` 只下载dependencies下的依赖\n\n## 全局命令\n在yarn命令前加一个global修饰，可以将命令变为全局的，支持的命令有 add,bin,ls,remove,upgrade\n例如`npm install gulp -g`,可以用`yarn global add gulp`来替代\n\n# 个人使用心得\n1. 更换安装源，使用阿里提供的npm register加速， `yarn config set registry 'https://registry.npm.taobao.org'`,当然如果npm已经配置过，yarn就无需再配置了。\n2. yarn还有许多小问题，不过官方也在努力修复中，建议时不时使用`yarn self-update`来更新版本\n3. 以前包锁定是使用`npm shrinkwrap`命令，感觉繁琐且难维护，使用yarn后自动生成锁定文件，简单方便\n\n# 参考资料\n[新的 js 包管理工具 yarn 解决了什么问题？](https://zhuanlan.zhihu.com/p/22967139)\n[yarn cli doc](https://yarnpkg.com/en/docs/cli/)","slug":"yarn","published":1,"updated":"2019-01-17T12:42:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr5yeq1g000cjc5bwwicp7cd","content":"<p>2016年10月11日，facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具)，本文将介绍yarn工具带来的优点和使用入门。</p>\n<a id=\"more\"></a>\n<p>本文会介绍yarn的以下几个方面：</p>\n<ol>\n<li>yarn对比npm解决了什么问题，带来哪些便利。</li>\n<li>获取yarn的正确姿势</li>\n<li>yarn的使用入门（介绍一些常用的命令</li>\n<li>个人使用心得</li>\n</ol>\n<h1 id=\"yarn对比npm的优点\"><a href=\"#yarn对比npm的优点\" class=\"headerlink\" title=\"yarn对比npm的优点\"></a>yarn对比npm的优点</h1><p>根据<a href=\"https://github.com/yarnpkg/yarn\" target=\"_blank\" rel=\"noopener\">官方文档</a>yarn具有6大优点</p>\n<h2 id=\"离线模式\"><a href=\"#离线模式\" class=\"headerlink\" title=\"离线模式\"></a>离线模式</h2><p>yarn会有一个缓存目录，会缓存以前安装过的软件包，再次安装时就不必从网络下载了，大大加速安装速度。</p>\n<p>这一点很重要，npm 饱受诟病的一点就是，每次安装依赖，都需要从网络下载一大堆东西，而且是全部重新下载，工程多的时候比较烦人。</p>\n<p>我司部署node项目，是需要在发布机上install所有的依赖而且发布机的网络环境不是很好(不给搭梯子)，导致安装慢不说还经常失败(部分包需要联网编译)。更换yarn后只需将yarn的cache目录缓存起来，每次install嗷嗷的快，麻麻再也不用担心发布失败了。</p>\n<h2 id=\"依赖关系确定性\"><a href=\"#依赖关系确定性\" class=\"headerlink\" title=\"依赖关系确定性\"></a>依赖关系确定性</h2><p>在每一台机器上针对同一个工程安装依赖时，生成的依赖关系顺序和版本是一致的。</p>\n<p>之前 npm 在这里有一个处理得不好的地方 。举例来说，我写的工程依赖 A, B, C 三个库，我在编写 package.json 的时候，给 A, B, C 都指定了版本号。但是 A 库可能又依赖 D, E, F 库，D 库又依赖 G, H 库。这么多关联依赖关系中，很可能某个库在指定依赖时，没有指定版本号。</p>\n<p>于是，这就导致了一个问题。如果我在另一台机器上对同样的工程安装依赖，或者把这台机器工程下的 node_modules 目录删除来重新安装依赖。由于关联依赖中，没有指定版本号的库，发生了版本更新，就会导致再次安装的依赖，其中具体某些软件包的版本是不一致的。在这种情况下，你会发现原来能够正常运行的程序，忽然变得不能工作或一堆 BUG.</p>\n<p>npm对包引入顺序也十分的敏感，比如在一个空项目里执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install globule@0.1.0 -S</span><br><span class=\"line\">npm install babel-generator@6.19.0 -S</span><br><span class=\"line\">npm install babel-helper-define-map@6.18.0 -S</span><br></pre></td></tr></table></figure>\n<p>我们这里安装了3个包都依赖于lodash，不过globule依赖<a href=\"mailto:lodash@1.0.3\" target=\"_blank\" rel=\"noopener\">lodash@1.0.3</a>,另外两个依赖<a href=\"mailto:lodash@4.x\" target=\"_blank\" rel=\"noopener\">lodash@4.x</a>。现在目录依赖结构如下<br><img src=\"http://p1.bpimg.com/567571/d6e758cf0daca760.png\" style=\"width:500px\"></p>\n<p>这时假设我们在项目里使用lodash，但是忘记重新安装lodash<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lodash = require(&apos;lodash&apos;);</span><br><span class=\"line\">console.log(lodash.VERSION); // v1.0.3</span><br></pre></td></tr></table></figure></p>\n<p>另一个同事获取项目代码，执行<code>npm install</code>,这时的目录依赖结构为<br><img src=\"http://p1.bpimg.com/567571/4e045ea553b1e6d1.png\" style=\"width:500px\"><br>可以看到第一层依赖的lodash变成了4.x版本，这样就造成了依赖版本不一致的问题。而yarn则会保证无论怎样引入的顺序，目录依赖结构都是一致的，确保不会发生这样的BUG。</p>\n<h2 id=\"网络性能优化\"><a href=\"#网络性能优化\" class=\"headerlink\" title=\"网络性能优化\"></a>网络性能优化</h2><p>下载软件时会优化请求顺序，避免<code>请求瀑布</code>发生</p>\n<h2 id=\"网络回弹\"><a href=\"#网络回弹\" class=\"headerlink\" title=\"网络回弹\"></a>网络回弹</h2><p>yarn在某个安装包请求失败时不会导致安装失败，它会自动去尝试重新安装。而npm则会毫不犹豫的失败，导致得再来一次，耗费时间</p>\n<h2 id=\"多注册来源\"><a href=\"#多注册来源\" class=\"headerlink\" title=\"多注册来源\"></a>多注册来源</h2><p>所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</p>\n<h2 id=\"扁平模式\"><a href=\"#扁平模式\" class=\"headerlink\" title=\"扁平模式\"></a>扁平模式</h2><p>对于多个包依赖同一个子包的情况，yarn会尽量提取为同一个包，防止出现多处副本，浪费空间。比如1.2中，yarn会为babel-generator和babel-helper-define-map 创建同一个lodash子依赖，这样就节约一份的空间。</p>\n<h2 id=\"更多的emojis\"><a href=\"#更多的emojis\" class=\"headerlink\" title=\"更多的emojis\"></a>更多的emojis</h2><p>表情包大战o(╯□╰)o<br><img src=\"http://i1.piimg.com/567571/9821a5982fd73104.jpg\" style=\"width:500px\"></p>\n<h1 id=\"正确的安装姿势\"><a href=\"#正确的安装姿势\" class=\"headerlink\" title=\"正确的安装姿势\"></a>正确的安装姿势</h1><p>注意yarn依赖node运行环境，官网提供了不同环境下的N种安装方法，<a href=\"https://yarnpkg.com/en/docs/install#alternatives-tab\" target=\"_blank\" rel=\"noopener\">点我查看</a>。其中最重要的也是最通用的当然是<code>npm install yarn -g</code>，也不知道官网搞那么多幺蛾子的安装方式干嘛又是brew又是yum，还折腾半天。</p>\n<h1 id=\"yarn常用命令介绍\"><a href=\"#yarn常用命令介绍\" class=\"headerlink\" title=\"yarn常用命令介绍\"></a>yarn常用命令介绍</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>命令<code>yarn init</code>，<a href=\"https://yarnpkg.com/en/docs/cli/init\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>跟npm一样，会出现一个交互式的窗口，问一些package相关的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">question name (testdir): my-awesome-package</span><br><span class=\"line\">question version (1.0.0):</span><br><span class=\"line\">question description: The best package you will ever find.</span><br><span class=\"line\">question entry point (index.js):</span><br><span class=\"line\">question git repository: https://github.com/yarnpkg/example-yarn-package</span><br><span class=\"line\">question author: Yarn Contributor</span><br><span class=\"line\">question license (MIT):</span><br><span class=\"line\">success Saved package.json</span><br><span class=\"line\">✨  Done in 87.70s.</span><br></pre></td></tr></table></figure>\n<p>当然可以加参数 <code>--yes/-y</code> 来自动回答所有的问题(yes),便捷的生成一个package.json</p>\n<h2 id=\"管理依赖\"><a href=\"#管理依赖\" class=\"headerlink\" title=\"管理依赖\"></a>管理依赖</h2><p>注意，以下的命令都会自动更新你的package.json和yarn.lock文件</p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>命令<code>yarn add [package]@[version/tag]</code>,<a href=\"https://yarnpkg.com/en/docs/cli/add\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>这会自动把包添加到package.json里的dependencies,也同时会更新yarn.lock</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-package&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">+     &quot;package-1&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>添加到不同的dependencies需要加如下参数</p>\n<ol>\n<li><code>yarn add --dev/-D</code> 添加到devDependencies</li>\n<li><code>yarn add --peer/-P</code> 添加到peerDependencies</li>\n<li><code>yarn add --optional/-O</code> 添加到optionalDependencies</li>\n</ol>\n<h3 id=\"更新依赖\"><a href=\"#更新依赖\" class=\"headerlink\" title=\"更新依赖\"></a>更新依赖</h3><p>命令<code>yarn upgrade [package]@[version/tag]</code>,<a href=\"https://yarnpkg.com/en/docs/cli/upgrade\" target=\"_blank\" rel=\"noopener\">详细介绍</a><br>更新某个依赖的版本，并自动更新package.json和yarn.lock文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-package&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">-     &quot;package-1&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">+     &quot;package-1&quot;: &quot;^2.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除依赖\"><a href=\"#删除依赖\" class=\"headerlink\" title=\"删除依赖\"></a>删除依赖</h3><p>命令<code>yarn remove [package]</code><br>删除某个依赖，并自动更新package.json和yarn.lock文件</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>命令 <code>yarn install</code>,<a href=\"https://yarnpkg.com/en/docs/cli/install\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>会从package.json里提取所有的依赖并安装，然后生成yarn.lock锁定所有的依赖版本，别人执行<code>yarn install</code>时会根据yarn.lock安装依赖，保证不同的电脑安装的依赖目录结构完全一致。</p>\n<p>可选参数</p>\n<ol>\n<li><code>yarn install --flat</code> 有且仅有一个依赖的版本被允许，多依赖会出现一个交互式窗口，让使用者选择某一个版本安装</li>\n<li><code>yarn install --force</code> 强制重新下载所有的依赖包</li>\n<li><code>yarn install --production</code> 只下载dependencies下的依赖</li>\n</ol>\n<h2 id=\"全局命令\"><a href=\"#全局命令\" class=\"headerlink\" title=\"全局命令\"></a>全局命令</h2><p>在yarn命令前加一个global修饰，可以将命令变为全局的，支持的命令有 add,bin,ls,remove,upgrade<br>例如<code>npm install gulp -g</code>,可以用<code>yarn global add gulp</code>来替代</p>\n<h1 id=\"个人使用心得\"><a href=\"#个人使用心得\" class=\"headerlink\" title=\"个人使用心得\"></a>个人使用心得</h1><ol>\n<li>更换安装源，使用阿里提供的npm register加速， <code>yarn config set registry &#39;https://registry.npm.taobao.org&#39;</code>,当然如果npm已经配置过，yarn就无需再配置了。</li>\n<li>yarn还有许多小问题，不过官方也在努力修复中，建议时不时使用<code>yarn self-update</code>来更新版本</li>\n<li>以前包锁定是使用<code>npm shrinkwrap</code>命令，感觉繁琐且难维护，使用yarn后自动生成锁定文件，简单方便</li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://zhuanlan.zhihu.com/p/22967139\" target=\"_blank\" rel=\"noopener\">新的 js 包管理工具 yarn 解决了什么问题？</a><br><a href=\"https://yarnpkg.com/en/docs/cli/\" target=\"_blank\" rel=\"noopener\">yarn cli doc</a></p>\n","site":{"data":{}},"excerpt":"<p>2016年10月11日，facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具)，本文将介绍yarn工具带来的优点和使用入门。</p>","more":"<p>本文会介绍yarn的以下几个方面：</p>\n<ol>\n<li>yarn对比npm解决了什么问题，带来哪些便利。</li>\n<li>获取yarn的正确姿势</li>\n<li>yarn的使用入门（介绍一些常用的命令</li>\n<li>个人使用心得</li>\n</ol>\n<h1 id=\"yarn对比npm的优点\"><a href=\"#yarn对比npm的优点\" class=\"headerlink\" title=\"yarn对比npm的优点\"></a>yarn对比npm的优点</h1><p>根据<a href=\"https://github.com/yarnpkg/yarn\" target=\"_blank\" rel=\"noopener\">官方文档</a>yarn具有6大优点</p>\n<h2 id=\"离线模式\"><a href=\"#离线模式\" class=\"headerlink\" title=\"离线模式\"></a>离线模式</h2><p>yarn会有一个缓存目录，会缓存以前安装过的软件包，再次安装时就不必从网络下载了，大大加速安装速度。</p>\n<p>这一点很重要，npm 饱受诟病的一点就是，每次安装依赖，都需要从网络下载一大堆东西，而且是全部重新下载，工程多的时候比较烦人。</p>\n<p>我司部署node项目，是需要在发布机上install所有的依赖而且发布机的网络环境不是很好(不给搭梯子)，导致安装慢不说还经常失败(部分包需要联网编译)。更换yarn后只需将yarn的cache目录缓存起来，每次install嗷嗷的快，麻麻再也不用担心发布失败了。</p>\n<h2 id=\"依赖关系确定性\"><a href=\"#依赖关系确定性\" class=\"headerlink\" title=\"依赖关系确定性\"></a>依赖关系确定性</h2><p>在每一台机器上针对同一个工程安装依赖时，生成的依赖关系顺序和版本是一致的。</p>\n<p>之前 npm 在这里有一个处理得不好的地方 。举例来说，我写的工程依赖 A, B, C 三个库，我在编写 package.json 的时候，给 A, B, C 都指定了版本号。但是 A 库可能又依赖 D, E, F 库，D 库又依赖 G, H 库。这么多关联依赖关系中，很可能某个库在指定依赖时，没有指定版本号。</p>\n<p>于是，这就导致了一个问题。如果我在另一台机器上对同样的工程安装依赖，或者把这台机器工程下的 node_modules 目录删除来重新安装依赖。由于关联依赖中，没有指定版本号的库，发生了版本更新，就会导致再次安装的依赖，其中具体某些软件包的版本是不一致的。在这种情况下，你会发现原来能够正常运行的程序，忽然变得不能工作或一堆 BUG.</p>\n<p>npm对包引入顺序也十分的敏感，比如在一个空项目里执行以下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">npm install globule@0.1.0 -S</span><br><span class=\"line\">npm install babel-generator@6.19.0 -S</span><br><span class=\"line\">npm install babel-helper-define-map@6.18.0 -S</span><br></pre></td></tr></table></figure>\n<p>我们这里安装了3个包都依赖于lodash，不过globule依赖<a href=\"mailto:lodash@1.0.3\" target=\"_blank\" rel=\"noopener\">lodash@1.0.3</a>,另外两个依赖<a href=\"mailto:lodash@4.x\" target=\"_blank\" rel=\"noopener\">lodash@4.x</a>。现在目录依赖结构如下<br><img src=\"http://p1.bpimg.com/567571/d6e758cf0daca760.png\" style=\"width:500px\"></p>\n<p>这时假设我们在项目里使用lodash，但是忘记重新安装lodash<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var lodash = require(&apos;lodash&apos;);</span><br><span class=\"line\">console.log(lodash.VERSION); // v1.0.3</span><br></pre></td></tr></table></figure></p>\n<p>另一个同事获取项目代码，执行<code>npm install</code>,这时的目录依赖结构为<br><img src=\"http://p1.bpimg.com/567571/4e045ea553b1e6d1.png\" style=\"width:500px\"><br>可以看到第一层依赖的lodash变成了4.x版本，这样就造成了依赖版本不一致的问题。而yarn则会保证无论怎样引入的顺序，目录依赖结构都是一致的，确保不会发生这样的BUG。</p>\n<h2 id=\"网络性能优化\"><a href=\"#网络性能优化\" class=\"headerlink\" title=\"网络性能优化\"></a>网络性能优化</h2><p>下载软件时会优化请求顺序，避免<code>请求瀑布</code>发生</p>\n<h2 id=\"网络回弹\"><a href=\"#网络回弹\" class=\"headerlink\" title=\"网络回弹\"></a>网络回弹</h2><p>yarn在某个安装包请求失败时不会导致安装失败，它会自动去尝试重新安装。而npm则会毫不犹豫的失败，导致得再来一次，耗费时间</p>\n<h2 id=\"多注册来源\"><a href=\"#多注册来源\" class=\"headerlink\" title=\"多注册来源\"></a>多注册来源</h2><p>所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。</p>\n<h2 id=\"扁平模式\"><a href=\"#扁平模式\" class=\"headerlink\" title=\"扁平模式\"></a>扁平模式</h2><p>对于多个包依赖同一个子包的情况，yarn会尽量提取为同一个包，防止出现多处副本，浪费空间。比如1.2中，yarn会为babel-generator和babel-helper-define-map 创建同一个lodash子依赖，这样就节约一份的空间。</p>\n<h2 id=\"更多的emojis\"><a href=\"#更多的emojis\" class=\"headerlink\" title=\"更多的emojis\"></a>更多的emojis</h2><p>表情包大战o(╯□╰)o<br><img src=\"http://i1.piimg.com/567571/9821a5982fd73104.jpg\" style=\"width:500px\"></p>\n<h1 id=\"正确的安装姿势\"><a href=\"#正确的安装姿势\" class=\"headerlink\" title=\"正确的安装姿势\"></a>正确的安装姿势</h1><p>注意yarn依赖node运行环境，官网提供了不同环境下的N种安装方法，<a href=\"https://yarnpkg.com/en/docs/install#alternatives-tab\" target=\"_blank\" rel=\"noopener\">点我查看</a>。其中最重要的也是最通用的当然是<code>npm install yarn -g</code>，也不知道官网搞那么多幺蛾子的安装方式干嘛又是brew又是yum，还折腾半天。</p>\n<h1 id=\"yarn常用命令介绍\"><a href=\"#yarn常用命令介绍\" class=\"headerlink\" title=\"yarn常用命令介绍\"></a>yarn常用命令介绍</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>命令<code>yarn init</code>，<a href=\"https://yarnpkg.com/en/docs/cli/init\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>跟npm一样，会出现一个交互式的窗口，问一些package相关的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">question name (testdir): my-awesome-package</span><br><span class=\"line\">question version (1.0.0):</span><br><span class=\"line\">question description: The best package you will ever find.</span><br><span class=\"line\">question entry point (index.js):</span><br><span class=\"line\">question git repository: https://github.com/yarnpkg/example-yarn-package</span><br><span class=\"line\">question author: Yarn Contributor</span><br><span class=\"line\">question license (MIT):</span><br><span class=\"line\">success Saved package.json</span><br><span class=\"line\">✨  Done in 87.70s.</span><br></pre></td></tr></table></figure>\n<p>当然可以加参数 <code>--yes/-y</code> 来自动回答所有的问题(yes),便捷的生成一个package.json</p>\n<h2 id=\"管理依赖\"><a href=\"#管理依赖\" class=\"headerlink\" title=\"管理依赖\"></a>管理依赖</h2><p>注意，以下的命令都会自动更新你的package.json和yarn.lock文件</p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>命令<code>yarn add [package]@[version/tag]</code>,<a href=\"https://yarnpkg.com/en/docs/cli/add\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>这会自动把包添加到package.json里的dependencies,也同时会更新yarn.lock</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-package&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">+     &quot;package-1&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>添加到不同的dependencies需要加如下参数</p>\n<ol>\n<li><code>yarn add --dev/-D</code> 添加到devDependencies</li>\n<li><code>yarn add --peer/-P</code> 添加到peerDependencies</li>\n<li><code>yarn add --optional/-O</code> 添加到optionalDependencies</li>\n</ol>\n<h3 id=\"更新依赖\"><a href=\"#更新依赖\" class=\"headerlink\" title=\"更新依赖\"></a>更新依赖</h3><p>命令<code>yarn upgrade [package]@[version/tag]</code>,<a href=\"https://yarnpkg.com/en/docs/cli/upgrade\" target=\"_blank\" rel=\"noopener\">详细介绍</a><br>更新某个依赖的版本，并自动更新package.json和yarn.lock文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;my-package&quot;,</span><br><span class=\"line\">    &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">-     &quot;package-1&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">+     &quot;package-1&quot;: &quot;^2.0.0&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除依赖\"><a href=\"#删除依赖\" class=\"headerlink\" title=\"删除依赖\"></a>删除依赖</h3><p>命令<code>yarn remove [package]</code><br>删除某个依赖，并自动更新package.json和yarn.lock文件</p>\n<h2 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h2><p>命令 <code>yarn install</code>,<a href=\"https://yarnpkg.com/en/docs/cli/install\" target=\"_blank\" rel=\"noopener\">详细介绍</a></p>\n<p>会从package.json里提取所有的依赖并安装，然后生成yarn.lock锁定所有的依赖版本，别人执行<code>yarn install</code>时会根据yarn.lock安装依赖，保证不同的电脑安装的依赖目录结构完全一致。</p>\n<p>可选参数</p>\n<ol>\n<li><code>yarn install --flat</code> 有且仅有一个依赖的版本被允许，多依赖会出现一个交互式窗口，让使用者选择某一个版本安装</li>\n<li><code>yarn install --force</code> 强制重新下载所有的依赖包</li>\n<li><code>yarn install --production</code> 只下载dependencies下的依赖</li>\n</ol>\n<h2 id=\"全局命令\"><a href=\"#全局命令\" class=\"headerlink\" title=\"全局命令\"></a>全局命令</h2><p>在yarn命令前加一个global修饰，可以将命令变为全局的，支持的命令有 add,bin,ls,remove,upgrade<br>例如<code>npm install gulp -g</code>,可以用<code>yarn global add gulp</code>来替代</p>\n<h1 id=\"个人使用心得\"><a href=\"#个人使用心得\" class=\"headerlink\" title=\"个人使用心得\"></a>个人使用心得</h1><ol>\n<li>更换安装源，使用阿里提供的npm register加速， <code>yarn config set registry &#39;https://registry.npm.taobao.org&#39;</code>,当然如果npm已经配置过，yarn就无需再配置了。</li>\n<li>yarn还有许多小问题，不过官方也在努力修复中，建议时不时使用<code>yarn self-update</code>来更新版本</li>\n<li>以前包锁定是使用<code>npm shrinkwrap</code>命令，感觉繁琐且难维护，使用yarn后自动生成锁定文件，简单方便</li>\n</ol>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://zhuanlan.zhihu.com/p/22967139\" target=\"_blank\" rel=\"noopener\">新的 js 包管理工具 yarn 解决了什么问题？</a><br><a href=\"https://yarnpkg.com/en/docs/cli/\" target=\"_blank\" rel=\"noopener\">yarn cli doc</a></p>"},{"title":"nodejs内存控制","date":"2019-02-20T08:32:00.000Z","_content":"主要给大家带来nodejs中v8引擎的内存控制以及泄漏排查\n<!--more-->\n\n","source":"_posts/v8memory.md","raw":"title: nodejs内存控制\ndate: 2019-02-20 16:32:00\ncategories: scliuyang\ntags:\n- node\n\n---\n主要给大家带来nodejs中v8引擎的内存控制以及泄漏排查\n<!--more-->\n\n","slug":"v8memory","published":1,"updated":"2019-02-20T06:35:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsctpqlo00005y5b5hop8gqx","content":"<p>主要给大家带来nodejs中v8引擎的内存控制以及泄漏排查<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>主要给大家带来nodejs中v8引擎的内存控制以及泄漏排查<br>","more":"</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjr5yeq190007jc5bvv64aqyq","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1i000djc5bvnnsptzj"},{"post_id":"cjr5yeq0z0002jc5bcnoiz6wm","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1j000gjc5bkzof6prp"},{"post_id":"cjr5yeq1a0008jc5bk8gjxymj","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1k000hjc5bug5mtmcs"},{"post_id":"cjr5yeq1e000bjc5bi4x1e6rh","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1o000jjc5b4md6793j"},{"post_id":"cjr5yeq130003jc5bxi2ogy6m","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1p000ljc5bf8zk5eke"},{"post_id":"cjr5yeq1g000cjc5bwwicp7cd","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1p000ojc5bbnjdft2s"},{"post_id":"cjr5yeq180006jc5bsiojiile","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjr5yeq1q000qjc5b6eevdhi8"},{"post_id":"cjsctpqlo00005y5b5hop8gqx","category_id":"cjr5yeq160004jc5bb2ngzi7n","_id":"cjsctpqm400025y5bckgax6rf"}],"PostTag":[{"post_id":"cjr5yeq0z0002jc5bcnoiz6wm","tag_id":"cjr5yeq180005jc5b3xwrrot2","_id":"cjr5yeq1o000kjc5bcy7d61rg"},{"post_id":"cjr5yeq0z0002jc5bcnoiz6wm","tag_id":"cjr5yeq1b000ajc5bhlechf36","_id":"cjr5yeq1p000mjc5blj9v8a0c"},{"post_id":"cjr5yeq0z0002jc5bcnoiz6wm","tag_id":"cjr5yeq1j000fjc5bakst2e6y","_id":"cjr5yeq1p000pjc5berkf5peo"},{"post_id":"cjr5yeq130003jc5bxi2ogy6m","tag_id":"cjr5yeq180005jc5b3xwrrot2","_id":"cjr5yeq1r000tjc5bp3rjdto2"},{"post_id":"cjr5yeq130003jc5bxi2ogy6m","tag_id":"cjr5yeq1b000ajc5bhlechf36","_id":"cjr5yeq1r000ujc5bfgkv7fks"},{"post_id":"cjr5yeq130003jc5bxi2ogy6m","tag_id":"cjr5yeq1j000fjc5bakst2e6y","_id":"cjr5yeq1s000wjc5bqu7vb6d6"},{"post_id":"cjr5yeq180006jc5bsiojiile","tag_id":"cjr5yeq180005jc5b3xwrrot2","_id":"cjr5yeq1t000zjc5b6j70s8ds"},{"post_id":"cjr5yeq180006jc5bsiojiile","tag_id":"cjr5yeq1b000ajc5bhlechf36","_id":"cjr5yeq1u0010jc5bge5n6i90"},{"post_id":"cjr5yeq180006jc5bsiojiile","tag_id":"cjr5yeq1j000fjc5bakst2e6y","_id":"cjr5yeq1u0012jc5bdxnj6n0d"},{"post_id":"cjr5yeq190007jc5bvv64aqyq","tag_id":"cjr5yeq180005jc5b3xwrrot2","_id":"cjr5yeq1v0014jc5bfsuieycu"},{"post_id":"cjr5yeq190007jc5bvv64aqyq","tag_id":"cjr5yeq1b000ajc5bhlechf36","_id":"cjr5yeq1v0015jc5bftomfwy7"},{"post_id":"cjr5yeq190007jc5bvv64aqyq","tag_id":"cjr5yeq1j000fjc5bakst2e6y","_id":"cjr5yeq1v0017jc5bbp3wmc2s"},{"post_id":"cjr5yeq1a0008jc5bk8gjxymj","tag_id":"cjr5yeq1u0013jc5b0s96ju69","_id":"cjr5yeq1w0019jc5bbiq05yea"},{"post_id":"cjr5yeq1a0008jc5bk8gjxymj","tag_id":"cjr5yeq1v0016jc5bkp7vvim1","_id":"cjr5yeq1w001ajc5b6gp32kbs"},{"post_id":"cjr5yeq1e000bjc5bi4x1e6rh","tag_id":"cjr5yeq1w0018jc5bc3lmr4rh","_id":"cjr5yeq1x001cjc5bprngcsnx"},{"post_id":"cjr5yeq1g000cjc5bwwicp7cd","tag_id":"cjr5yeq1w001bjc5b0preec54","_id":"cjr5yeq1x001djc5bwbarvf92"},{"post_id":"cjsctpqlo00005y5b5hop8gqx","tag_id":"cjsctpqm000015y5bgrz6tlv5","_id":"cjsctpqm500035y5biwjp15w2"}],"Tag":[{"name":"Chrome Developers Tools","_id":"cjr5yeq180005jc5b3xwrrot2"},{"name":"Debug","_id":"cjr5yeq1b000ajc5bhlechf36"},{"name":"DevTools","_id":"cjr5yeq1j000fjc5bakst2e6y"},{"name":"提问","_id":"cjr5yeq1u0013jc5b0s96ju69"},{"name":"高效的提问","_id":"cjr5yeq1v0016jc5bkp7vvim1"},{"name":"docker","_id":"cjr5yeq1w0018jc5bc3lmr4rh"},{"name":"yarn","_id":"cjr5yeq1w001bjc5b0preec54"},{"name":"node","_id":"cjsctpqm000015y5bgrz6tlv5"}]}}